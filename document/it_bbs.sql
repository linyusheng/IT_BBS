/*
Navicat MySQL Data Transfer

Source Server         : LYS
Source Server Version : 50132
Source Host           : localhost:3306
Source Database       : it_bbs

Target Server Type    : MYSQL
Target Server Version : 50132
File Encoding         : 65001

Date: 2014-06-04 21:22:45
*/

SET FOREIGN_KEY_CHECKS=0;

-- ----------------------------
-- Table structure for `article`
-- ----------------------------
DROP TABLE IF EXISTS `article`;
CREATE TABLE `article` (
  `articleId` int(11) NOT NULL AUTO_INCREMENT,
  `userId` int(11) DEFAULT NULL,
  `articleTitle` varchar(100) DEFAULT NULL,
  `articleType` varchar(100) DEFAULT NULL,
  `articleSort` varchar(20) DEFAULT NULL,
  `articleInfo` text,
  `articleReadNum` varchar(100) DEFAULT NULL,
  `articleCommentNum` varchar(20) DEFAULT NULL,
  `articlePraiseNum` varchar(100) DEFAULT NULL,
  `articleLabel` varchar(50) DEFAULT NULL,
  `writeTime` datetime DEFAULT NULL,
  PRIMARY KEY (`articleId`),
  KEY `FK_Relationship_2` (`userId`),
  CONSTRAINT `FK_Relationship_2` FOREIGN KEY (`userId`) REFERENCES `user` (`userId`)
) ENGINE=InnoDB AUTO_INCREMENT=59 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of article
-- ----------------------------
INSERT INTO `article` VALUES ('47', '1', 'struts实现登录', 'Web前端', 'jsp', '<pre class=\"brush:xml;\">\r\n/**\r\n	 * 登录验证\r\n	 */\r\n	public String login() throws Exception{\r\n		if(userName == null || password == null){\r\n			return &quot;fail&quot;;\r\n		}\r\n		if(userService.isUserNameExist(userName)){\r\n			user = userService.login(userName, password);\r\n			if(user!=null){\r\n				user.setLastLoginTime(TimeBean.getCurrenTime());\r\n				//更新会话\r\n				updateSession();\r\n				return &quot;success&quot;;\r\n			}\r\n		}\r\n		return &quot;fail&quot;;\r\n	}</pre>\r\n\r\n<p>&nbsp;</p>\r\n', '30', '0', '0', '', '2014-05-26 01:11:30');
INSERT INTO `article` VALUES ('48', '1', '如何绕过Java的构造方法来创建实例', '编程语言', 'java', '<p><span style=\"font-size:16px\"><span style=\"color:rgb(0, 0, 0); font-family:helvetica,tahoma,arial,sans-serif\">我所设计的绝大部分类，我都会关注它们的不可变性。要想获得不可变性需要这样做：&nbsp;</span></span></p>\r\n\r\n<ul>\r\n	<li><span style=\"font-size:16px\">使用构造方法来初始化所有的属性。</span></li>\r\n	<li><span style=\"font-size:16px\">这些属性没有setter方法。</span></li>\r\n	<br />\r\n	<li><span style=\"font-size:16px\"><span style=\"color:rgb(0, 0, 0); font-family:helvetica,tahoma,arial,sans-serif\">然而，这样的设计使得测试更加复杂甚至无法测试。为了能进行测试，你还需要一个public的无参构造方法。&nbsp;</span><br />\r\n	<br />\r\n	<span style=\"color:rgb(0, 0, 0); font-family:helvetica,tahoma,arial,sans-serif\">其它需要无参构造方法的情况包括：&nbsp;</span></span></li>\r\n	<br />\r\n	<li><span style=\"font-size:16px\">序列化对象的反序列化。</span></li>\r\n	<li><span style=\"font-size:16px\">子类中没有调用父类的构造函数。</span></li>\r\n	<li><span style=\"font-size:16px\">其它</span></li>\r\n	<br />\r\n	<li><span style=\"font-size:16px\"><span style=\"color:rgb(0, 0, 0); font-family:helvetica,tahoma,arial,sans-serif\">下面是它的一些解决方案。&nbsp;</span><br />\r\n	<br />\r\n	<span style=\"color:rgb(0, 0, 0); font-family:helvetica,tahoma,arial,sans-serif\">1. 实现一个public的无参构造方法&nbsp;</span><br />\r\n	<br />\r\n	<span style=\"color:rgb(0, 0, 0); font-family:helvetica,tahoma,arial,sans-serif\">最简单的方式就是创建一个public的无参构造函数了，然后添加一个大的醒目的警告信息让开发人员别去使用这个方法。你可以想像得到，这种方法虽然简单，但是它无法强制约束什么，因为你得依赖开发人员的自觉性来遵循你的规则（或者更多地是他们得能在第一时间看到这段警告文档&mdash;&mdash;这得赌一下了）。&nbsp;</span><br />\r\n	<br />\r\n	<span style=\"color:rgb(0, 0, 0); font-family:helvetica,tahoma,arial,sans-serif\">这么做最大的限制就是你得能够修改类的代码。&nbsp;</span><br />\r\n	<br />\r\n	<span style=\"color:rgb(0, 0, 0); font-family:helvetica,tahoma,arial,sans-serif\">2. 实现一个包可见的无参构造方法&nbsp;</span><br />\r\n	<br />\r\n	<span style=\"color:rgb(0, 0, 0); font-family:helvetica,tahoma,arial,sans-serif\">测试时一个常见的方法就是将类的private方法的可见性改成包可见的，这样的话测试类只要和它们在一个包下面就可以进行测试了。同样的方法也适用于我们这个例子中：实现一个包可见的无参构造方法。&nbsp;</span><br />\r\n	<br />\r\n	<span style=\"color:rgb(0, 0, 0); font-family:helvetica,tahoma,arial,sans-serif\">这需要测试类和这个创建了构造函数的类在同一个包底下。和情况1类似，你也得去修改类的代码。&nbsp;</span><br />\r\n	<br />\r\n	<span style=\"color:rgb(0, 0, 0); font-family:helvetica,tahoma,arial,sans-serif\">3. 使用Unsafe来实现&nbsp;</span><br />\r\n	<br />\r\n	<span style=\"color:rgb(0, 0, 0); font-family:helvetica,tahoma,arial,sans-serif\">JDK像一座埋藏的宝藏：它包含许多隐藏的闪亮的特性;sun.misc.Unsafe就是其中之一。当然了，正如它的名字和所在包所暗示的那样，它的使用是非常不推荐的。Unsafe提供了一个allocateInstance的方法来创建新的实例，而不用调用任何构造函数，也就是不需要调用任何初始化程序。&nbsp;</span><br />\r\n	<br />\r\n	<span style=\"color:rgb(0, 0, 0); font-family:helvetica,tahoma,arial,sans-serif\">注意Unsafe只有实例方法，而它仅有的一个构造函数是私有的。。但它提供了一个私有的单例属性。要想获取这个属性的引用，你需要用到一点反射的逻辑，以及一个宽松的安全管理器（SecurityManager)。</span></span></li>\r\n</ul>\r\n\r\n<pre class=\"brush:java;\">\r\n<span style=\"font-size:16px\">\r\nField field = Unsafe.class.getDeclaredField(&quot;theUnsafe&quot;);\r\nfield.setAccessible(true);\r\nUnsafe unsafe = (Unsafe) field.get(null);\r\n \r\njava.sql.Date date = (java.sql.Date) unsafe.allocateInstance(java.sql.Date.class);\r\n\r\n </span></pre>\r\n\r\n<p><span style=\"font-size:16px\"><span style=\"color:rgb(0, 0, 0); font-family:helvetica,tahoma,arial,sans-serif\">这个方法最大的限制在在：&nbsp;</span></span></p>\r\n\r\n<ul>\r\n	<li><span style=\"font-size:16px\">依赖公共API以外的类</span></li>\r\n	<li><span style=\"font-size:16px\">使用反射来访问私有属性</span></li>\r\n	<li><span style=\"font-size:16px\">只在Oracle的HotSpot JVM上可用</span></li>\r\n	<li><span style=\"font-size:16px\">需要设置一个足够宽松的安全管理器</span></li>\r\n	<br />\r\n	<li><span style=\"font-size:16px\"><span style=\"color:rgb(0, 0, 0); font-family:helvetica,tahoma,arial,sans-serif\">4. Objenesis&nbsp;</span><br />\r\n	<span style=\"color:rgb(0, 0, 0); font-family:helvetica,tahoma,arial,sans-serif\">Objenesis是一个旨在不使用构造函数创建新的实例的一个框架。它基于Unsafe提供了一个抽象层。Objenesis在不同的JVM上也同样可用，包括不同版本的OpenJDK, Oracle的JRokkit和Dalvik（也就是Android的），它使用了不同的策略来适配不同的JVM以及不同的版本的组合。&nbsp;</span><br />\r\n	<br />\r\n	<span style=\"color:rgb(0, 0, 0); font-family:helvetica,tahoma,arial,sans-serif\">上述的代码可以替换成这面这个：</span></span>\r\n	<pre class=\"brush:java;\">\r\n<span style=\"font-size:16px\">Objenesis objenesis = new ObjenesisStd();\r\nObjectInstantiator instantiator = objenesis.getInstantiatorOf(java.sql.Date.class);\r\n \r\njava.sql.Date date = (java.sql.Date) instantiator.newInstance();\r\nSystem.out.println(date);\r\n </span></pre>\r\n	</li>\r\n</ul>\r\n\r\n<p><span style=\"font-size:16px\">&nbsp;<span style=\"color:rgb(0, 0, 0); font-family:helvetica,tahoma,arial,sans-serif\">在Oracle的HotSpot上运行这段代码同样需要一个宽松的安全管理器，因为Objenesis使用的也是上面的Unsafe类。然而，不同的JVM可能会有不同的要求，这些Objenesis都替你处理了。&nbsp;</span><br />\r\n<br />\r\n<br />\r\n<strong>结论</strong><span style=\"color:rgb(0, 0, 0); font-family:helvetica,tahoma,arial,sans-serif\">&nbsp;</span><br />\r\n<br />\r\n<span style=\"color:rgb(0, 0, 0); font-family:helvetica,tahoma,arial,sans-serif\">尽管并不常见也没有专门的要求，但有时候还是需要不使用构造函数来创建实例的。万一碰上这样的情况，Objenesis框架为你提供了一个可移植的抽象层来实现这个，你只需要多增加一个额外的依赖就可以了。</span></span></p>\r\n', '26', '0', '0', 'java', '2014-05-26 17:35:12');
INSERT INTO `article` VALUES ('49', '2', 'HBase轻量级框架Parrot', '开源软件', 'HBase', '<p><strong>目录</strong></p>\r\n\r\n<ul>\r\n	<li><strong>Parrot</strong><strong>是什么？</strong></li>\r\n	<li><strong>Parrot</strong><strong>的数据源配置与连接</strong></li>\r\n	<li><strong>使用无状态的实体</strong><strong>Bean</strong><strong>执行</strong><strong>CRUD</strong><strong>；</strong></li>\r\n	<li><strong>Parrot</strong><strong>所支持的原生</strong><strong>HBase</strong><strong>特性；</strong></li>\r\n	<li><strong>Parrot</strong><strong>中被废弃的事物操作；</strong></li>\r\n	<li><strong>Parrot</strong><strong>的设计实现；</strong></li>\r\n</ul>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;<strong>一、</strong><strong>Parrot</strong><strong>是什么？</strong></p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在弄清楚Parrot是什么之前，你需要首先弄清楚HBase是什么，HBase能够适用于哪些场</p>\r\n\r\n<p>景？当这一切你都明白后，再开看看如何使用Parrot。</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Parrot是鹦鹉的单词，或许源于家族遗传因素，本人对鸟类一直比较感冒，所以故用此名</p>\r\n\r\n<p>作为该项目的名字。Parrot是一种超轻量级的HBase框架，它对代码的侵入极低，且不依赖于任何容</p>\r\n\r\n<p>器，也就是说最简单的Java工程中也能够跑起来。就目前而言，市面上几乎没有成熟的HBase框架，</p>\r\n\r\n<p>那么Parrot诞生的目的已经很明确了，就是为了开发实惠！</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;目前开发人员在程序中大部分都是直接使用HBase Client API操作HBase。笔者使用该工具在项目中倒腾了差不多有半年多的时间，不得不说，使用原生的HBase Client操作HBase确实是一件非常痛苦的事情，不仅开发耗时，且代码冗余度极高。所以我在HBase Client API的基础之上，轻量级的封装了一层，以达到极致简化的目的，这便是Parrot的重。Parrot目前的最新版本是1.1，后续版本中，Parrot将会继续迭代。</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Parrot的优点如下：</p>\r\n\r\n<ul style=\"list-style-type:square\">\r\n	<li><strong>降低原本</strong><strong>90%</strong><strong>的工作量，使你只需关注于业务；</strong></li>\r\n	<li><strong>使用无状态的</strong><strong>Entity Bean</strong><strong>方式，对</strong><strong>HBase</strong><strong>进行</strong><strong>CRUD</strong><strong>操作；</strong></li>\r\n	<li><strong>低侵入式设计，与业务耦合极低；</strong></li>\r\n	<li><strong>支持从</strong><strong>Diamond</strong><strong>中进行数据源信息的配置和加载；</strong></li>\r\n	<li><strong>数据检索的自动映射操作；</strong></li>\r\n	<li><strong>支持</strong><strong>HBase</strong><strong>原生的</strong><strong>TTableInterface</strong><strong>接口；</strong></li>\r\n</ul>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p style=\"margin-left:21pt\">Parrot缺省依赖Diamond、HBase Client API等相关构件！</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>二、</strong><strong>Parrot</strong><strong>的数据源配置与连接</strong></p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Parrot不支持HBase缺省的基于配置文件的方式配置数据源信息，之所以这么做是因为在大规模的项目场景中，资源配置最好是集中式的，以此避免每一次的项目部署都需要修改集群节点中的配置文件，所以Parrot选用了淘宝的Diamond最为集中式配置中心。</p>\r\n\r\n<p>Parrot在Diamond中的数据源配置信息(dataId=hbase_info,组名=DEFAULT_GROUP)：</p>\r\n\r\n<p style=\"margin-left:21pt\"><strong>rootdir=hdfs://CNSZ141222:30000/hbase</strong></p>\r\n\r\n<p style=\"margin-left:21pt\"><strong>distributed=true</strong></p>\r\n\r\n<p style=\"margin-left:21pt\"><strong>quorum=CNSZ141222,CNSZ141223,CNSZ141224</strong></p>\r\n\r\n<p style=\"margin-left:21pt\"><strong>maxSize=1000</strong></p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>其中rootdir属性配置了HDFS的地址，distributed属性配置了HBase是否集群，quorum属性配置了ZK的与IP地址对应的机器名，最后一个属性maxSize则用于配置TablePool的连接数。</p>\r\n\r\n<p>当你第一次使用Parrot的时候，你需要现将上述信息配置在Diamond中。然后在程序中你只需通过如下语句，便可以建立与HBase的连接：</p>\r\n\r\n<p style=\"margin-left:10.5pt\"><strong>public</strong><strong>class</strong>&nbsp;ParrotTest {</p>\r\n\r\n<p style=\"margin-left:10.5pt\">&nbsp;&nbsp;<strong>private</strong><strong>static</strong>&nbsp;ConnectionConfig&nbsp;<em>conn</em>;</p>\r\n\r\n<p style=\"margin-left:10.5pt\">&nbsp;&nbsp;@BeforeClass</p>\r\n\r\n<p style=\"margin-left:10.5pt\">&nbsp;&nbsp;<strong>public</strong><strong>static</strong><strong>void</strong>&nbsp;testConnection() {</p>\r\n\r\n<p style=\"margin-left:10.5pt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<em>conn</em>&nbsp;=&nbsp;<strong>new</strong>&nbsp;ParrotConnectionConfig();</p>\r\n\r\n<p style=\"margin-left:10.5pt\">&nbsp;&nbsp;}</p>\r\n\r\n<p style=\"margin-left:10.5pt\">}</p>\r\n\r\n<p style=\"margin-left:10.5pt\">}</p>\r\n\r\n<p style=\"margin-left:10.5pt\">&nbsp;</p>\r\n\r\n<p style=\"margin-left:10.5pt\">ConnectionConfig接口是Parrot的数据源接口，支持从Diamond集中式配置中心获取HBase的数据源信息并建立与HBase的会话连接。前面我们说过Parrot能够及时响应Diamond的变化，一旦Diamond中的配置信息发生变化，Parrot便会重新调用ConnectionConfig接口中的loadDataSource()方法，重新初始化数据源信息并关闭内部打开的TablePool连接。</p>\r\n\r\n<p style=\"margin-left:10.5pt\">&nbsp;</p>\r\n\r\n<p style=\"margin-left:10.5pt\">ConnectionConfig接口的常用方法如下：</p>\r\n\r\n<ul style=\"list-style-type:square\">\r\n	<li><code>&nbsp;&nbsp; </code><strong>MetaDataTable</strong><strong>getTable</strong><code><strong>()</strong></code>：获取一个用于操作HBase元数据的Table对象.&nbsp;&nbsp;</li>\r\n	<li><code>&nbsp;&nbsp; </code><strong>ParrotTable</strong><strong>getTable</strong><code><strong>(java.lang.Class&nbsp;entityClass)</strong></code>：根据实体Bean中的信息从HBase中获取指定的Table对象；</li>\r\n	<li><strong>ParrotTemplate</strong><strong>getTemplate</strong><code><strong>()</strong></code>：获取一个用于执行数据检索的ParrotTemplate对象；</li>\r\n	<li><code><strong>void</strong></code><strong>loadDataSource</strong><code><strong>(com.taobao.diamond.manager.ManagerListener&nbsp;listener)</strong></code>：从Diamond集中式配置中心获取出HBase的数据源信息；</li>\r\n</ul>\r\n\r\n<p style=\"margin-left:39pt\">&nbsp;</p>\r\n\r\n<p><strong>三、使用无状态的实体</strong><strong>Bean</strong><strong>执行</strong><strong>CRUD</strong><strong>；</strong></p>\r\n\r\n<p>使用无状态的实体Bean操作HBase，翻译白话点，就是使用对象的方式操作HBase。光从名字就能够听出来，既然使用了面向对象特性，那么操作HBase必然比使用原生的HBase Client API更简单，不过Parrot不仅支持实体Bean的方式对HBase执行CRUD操作，并且对于数据检索，Parrot还能够做到将检索的数据结果集，自动映射到实体Bean上。</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>在使用实体Bean操作HBase之前，实体Bean必须添加@Entity注解，如下所示：</p>\r\n\r\n<p>@Entity(tableName =&nbsp;&quot;my_table&quot;, cloumnFamily = {&nbsp;&quot;info&quot;&nbsp;})</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>上述住接种，tableName属性指定了HBase的表名，cloumnFamily则指定了列族，很遗憾的是目前Parrot1.0的版本中，只能够暂时支持一个列族。不过这并不我们的使用，且按常理说，列族的数量越少，HBase的执行效率越快，这也是实时。</p>\r\n\r\n<p>定义实体Bean对象：</p>\r\n\r\n<pre class=\"brush:java;\">\r\n@Entity(tableName = &quot;my_table&quot;, cloumnFamily = { &quot;info&quot; })\r\npublicclass Bean1 {\r\n     private String userName, passWord;\r\n \r\n     public String getUserName() {\r\n         returnuserName;\r\n     }\r\n \r\n     publicvoid setUserName(String userName) {\r\n         this.userName = userName;\r\n     }\r\n \r\n     public String getPassWord() {\r\n         returnpassWord;\r\n     }\r\n \r\n     publicvoid setPassWord(String passWord) {\r\n         this.passWord = passWord;\r\n     }\r\n}</pre>\r\n\r\n<p><span style=\"color:black; font-family:宋体; font-size:10pt\">使用</span><span style=\"color:black; font-family:consolas; font-size:10pt\">Parrot</span><span style=\"color:black; font-family:宋体; font-size:10pt\">操作实体</span><span style=\"color:black; font-family:consolas; font-size:10pt\">Bean</span><span style=\"color:black; font-family:宋体; font-size:10pt\">对象执行</span><span style=\"color:black; font-family:consolas; font-size:10pt\">CRUD</span><span style=\"color:black; font-family:宋体; font-size:10pt\">操作：</span></p>\r\n\r\n<pre class=\"brush:java;\">\r\nprivatestatic ConnectionConfig conn;\r\n     @BeforeClass\r\n     publicstaticvoid testConnection() {\r\n         conn = new ParrotConnectionConfig();\r\n     }\r\n \r\n     @Test\r\n     publicvoid testInsert() throws Exception {\r\n         ParrotTable table = conn.getTable(Bean1.class);\r\n         Bean1 entityObj = new Bean1();\r\n         entityObj.setUserName(&quot;JohnGao&quot;);\r\n         entityObj.setPassWord(&quot;123456&quot;);\r\n         table.insert(entityObj, &quot;key1&quot;);\r\n     }\r\n \r\n     @Test\r\n     publicvoid testInserts() throws Exception {\r\n         ParrotTable table = conn.getTable(Bean1.class);\r\n         Bean1 entityObj1 = new Bean1();\r\n         entityObj1.setUserName(&quot;JohnGao1&quot;);\r\n         entityObj1.setPassWord(&quot;123456&quot;);\r\n         Bean1 entityObj2 = new Bean1();\r\n         entityObj2.setUserName(&quot;JohnGao2&quot;);\r\n         entityObj2.setPassWord(&quot;123456&quot;);\r\n         List&lt;Bean1&gt; entityObjs = new ArrayList&lt;Bean1&gt;();\r\n         entityObjs.add(entityObj1);\r\n         entityObjs.add(entityObj2);\r\n         List&lt;String&gt; rowKeys = new ArrayList&lt;String&gt;();\r\n         rowKeys.add(&quot;key1&quot;);\r\n         rowKeys.add(&quot;key2&quot;);\r\n         table.insert(entityObjs, rowKeys);\r\n     }\r\n \r\n     @Test\r\n     publicvoid testUpdate() throws Exception {\r\n         ParrotTable table = conn.getTable(Bean1.class);\r\n         Bean1 entityObj = new Bean1();\r\n         entityObj.setUserName(&quot;JohnGao1&quot;);\r\n         entityObj.setPassWord(&quot;1111111&quot;);\r\n         table.update(entityObj, &quot;key1&quot;);\r\n     }\r\n \r\n     @Test\r\n     publicvoid testUpdates() throws Exception {\r\n         ParrotTable table = conn.getTable(Bean1.class);\r\n         Bean1 entityObj1 = new Bean1();\r\n         entityObj1.setUserName(&quot;JohnGao1&quot;);\r\n         entityObj1.setPassWord(&quot;2222222&quot;);\r\n         Bean1 entityObj2 = new Bean1();\r\n         entityObj2.setUserName(&quot;JohnGao2&quot;);\r\n         entityObj2.setPassWord(&quot;33333333&quot;);\r\n         List&lt;Bean1&gt; entityObjs = new ArrayList&lt;Bean1&gt;();\r\n         entityObjs.add(entityObj1);\r\n         entityObjs.add(entityObj2);\r\n         List&lt;String&gt; rowKeys = new ArrayList&lt;String&gt;();\r\n         rowKeys.add(&quot;key1&quot;);\r\n         rowKeys.add(&quot;key2&quot;);\r\n         table.update(entityObjs, rowKeys);\r\n     }\r\n \r\n     @Test\r\n     publicvoid testDelete() throws Exception {\r\n         ParrotTable table = conn.getTable(Bean1.class);\r\n         table.delete(&quot;key1&quot;);\r\n     }\r\n \r\n     @Test\r\n     publicvoid testDeletes() throws Exception {\r\n         ParrotTable table = conn.getTable(Bean1.class);\r\n         List&lt;String&gt; rowKeys = new ArrayList&lt;String&gt;();\r\n         rowKeys.add(&quot;key1&quot;);\r\n         rowKeys.add(&quot;key2&quot;);\r\n         table.delete(rowKeys);\r\n     }\r\n \r\n     @Test\r\n     publicvoid testGet1() throws Exception {\r\n         ParrotTemplate template = conn.getTemplate();\r\n         Bean1 bean = (Bean1) template.get(Bean1.class, &quot;key1&quot;);\r\n         System.out.println(bean.getUserName());\r\n         System.out.println(bean.getPassWord());\r\n     }\r\n \r\n     @Test\r\n     publicvoid testGet2() throws Exception {\r\n         ParrotTemplate template = conn.getTemplate();\r\n         List&lt;String&gt; rowKeys = new ArrayList&lt;String&gt;();\r\n         rowKeys.add(&quot;key1&quot;);\r\n         rowKeys.add(&quot;key2&quot;);\r\n         List&lt;Bean1&gt; beans = (List&lt;Bean1&gt;) template.get(Bean1.class, rowKeys);\r\n         for (Bean1 bean : beans) {\r\n              System.out.println(bean.getUserName());\r\n              System.out.println(bean.getPassWord());\r\n         }\r\n     }\r\n \r\n     @Test\r\n     publicvoid testGet3() throws Exception {\r\n         ParrotTemplate template = conn.getTemplate();\r\n         Object[] objs = template.get(Bean1.class,\r\n                   new String[] { &quot;key1&quot;, &quot;key2&quot; });\r\n         for (Object obj : objs) {\r\n              Bean1 bean = (Bean1) obj;\r\n              System.out.println(bean.getUserName());\r\n              System.out.println(bean.getPassWord());\r\n         }\r\n     }\r\n \r\n     @Test\r\n     publicvoid testfind1() throws Exception {\r\n         ParrotTemplate template = conn.getTemplate();\r\n         List&lt;Bean1&gt; beans = template.find(Bean1.class, &quot;key&quot;, null, null);\r\n         for (Bean1 bean : beans) {\r\n              System.out.println(bean.getUserName());\r\n              System.out.println(bean.getPassWord());\r\n         }\r\n     }\r\n \r\n     @Test\r\n     publicvoid testfind2() throws Exception {\r\n         SimpleDateFormat format = new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;);\r\n         ParrotTemplate template = conn.getTemplate();\r\n         List&lt;Bean1&gt; beans = template.find(Bean1.class, &quot;key&quot;,\r\n                   format.parse(&quot;2014-05-23 00:00:00&quot;).getTime(),\r\n                   format.parse(&quot;2014-05-24 00:00:00&quot;).getTime());\r\n         for (Bean1 bean : beans) {\r\n              System.out.println(bean.getUserName());\r\n              System.out.println(bean.getPassWord());\r\n         }\r\n     }\r\n \r\n     @Test\r\n     publicvoid testfind3() throws Exception {\r\n         ParrotTemplate template = conn.getTemplate();\r\n         List&lt;Bean1&gt; beans = template\r\n                   .find(Bean1.class, &quot;key&quot;, null, null, 0, 10);\r\n         for (Bean1 bean : beans) {\r\n              System.out.println(bean.getUserName());\r\n              System.out.println(bean.getPassWord());\r\n         }\r\n     }\r\n \r\n     @Test\r\n     publicvoid testfind4() throws Exception {\r\n         SimpleDateFormat format = new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;);\r\n         ParrotTemplate template = conn.getTemplate();\r\n         List&lt;Bean1&gt; beans = template.find(Bean1.class, &quot;key&quot;,\r\n                   format.parse(&quot;2014-05-22 00:00:00&quot;).getTime(),\r\n                   format.parse(&quot;2014-05-23 00:00:00&quot;).getTime(), 0, 10);\r\n         for (Bean1 bean : beans) {\r\n              System.out.println(bean.getUserName());\r\n              System.out.println(bean.getPassWord());\r\n         }\r\n}</pre>\r\n\r\n<p style=\"margin-left:21pt\">&nbsp;</p>\r\n\r\n<p style=\"margin-left:21pt\">上述程序中我们很好的使用了Parrot的对象特性对HBase进行了CRUD操作，那么ConnectionConfig中包含2个getTable()方法，上述程序中使用getTable()方法成功的获取到了一个ParrotTable对象，该对象代表着可以用于操作HBase Table的一个表对象。</p>\r\n\r\n<p style=\"margin-left:21pt\">如果需要执行查询，我们则可以使用ConnectionConfig的getTemplate()方法获取一个ParrotTemplate对象，不仅支持通过索引的get操作，也能够支持scan扫描的find方式。</p>\r\n\r\n<p style=\"margin-left:21pt\">当我们使用完ParrotTable或者ParrotTemplate后，Parrot会自动管理其中的连接，无需开发人员手动进行资源的释放，并且使用ParrotTemplate执行数据检索的时候，结果集会自动被映射到实体Bean中返回，而无需开发人员手动进行赋值操作。</p>\r\n\r\n<p style=\"margin-left:21pt\">除了对Table进行CRUD操作，我们还可以通过getTable()方法获取到MetaDateTable对象，该对象用于执行HBase中的元数据操作，比如表的创建和删除，使用方式如下所示：</p>\r\n\r\n<pre class=\"brush:java;\">\r\n@Test\r\n     publicvoid testDropTable() throws Exception {\r\n         MetaDataTable table = conn.getTable();\r\n         table.drop(Bean1.class);\r\n     }\r\n \r\n     @Test\r\n     publicvoid testCreateTable() throws Exception {\r\n         MetaDataTable table = conn.getTable();\r\n         table.create(Bean1.class);\r\n     }\r\n \r\n     @Test\r\n     publicvoid testCreateTables() throws Exception {\r\n         MetaDataTable table = conn.getTable();\r\n         List&lt;Class&gt; classes = new ArrayList&lt;Class&gt;();\r\n         classes.add(Bean1.class);\r\n         classes.add(Bean2.class);\r\n         table.create(classes);\r\n     }\r\n \r\n     @Test\r\n     publicvoid testDropTables() throws Exception {\r\n         MetaDataTable table = conn.getTable();\r\n         List&lt;Class&gt; classes = new ArrayList&lt;Class&gt;();\r\n         classes.add(Bean1.class);\r\n         classes.add(Bean2.class);\r\n         table.drop(classes);\r\n     }</pre>\r\n\r\n<p><strong>四、</strong><strong>Parrot</strong><strong>所支持的原生</strong><strong>HBase</strong><strong>特性</strong></p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当Parrot不满足于我们的业务场景时怎么办？这个时候可以使用ConnectionConfig接口</p>\r\n\r\n<p>中提供的getHTableInterface()方法，该方法会返回一个HTableInterface对象，该对象就是</p>\r\n\r\n<p>HBase的原生Table对象，开发人员可以使用该对象完成HBase的CRUD操作，如下所示：</p>\r\n\r\n<pre class=\"brush:java;\">\r\n@Test\r\n     publicvoid testHTableInterface() throws Exception {\r\n         /* HBase的原生操作 */\r\n         SimpleDateFormat format = new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;);\r\n         ParrotTable parrotTable = conn.getTable(Bean1.class);\r\n         HTableInterface table = parrotTable.getHTableInterface();\r\n         Scan can = new Scan();\r\n         can.setStartRow(Bytes.toBytes(&quot;key&quot;));\r\n         can.setTimeRange(format.parse(&quot;2014-05-23 00:00:00&quot;).getTime(), format\r\n                   .parse(&quot;2014-05-24 00:00:00&quot;).getTime());\r\n         ResultScanner rts = table.getScanner(can);\r\n         Result rt = null;\r\n         while ((rt = rts.next()) != null) {\r\n              System.out.println(Bytes.toString(rt.getValue(&quot;info&quot;.getBytes(),\r\n                       &quot;userName&quot;.getBytes())));\r\n              System.out.println(Bytes.toString(rt.getValue(&quot;info&quot;.getBytes(),\r\n                       &quot;passWord&quot;.getBytes())));\r\n         }\r\n         parrotTable.setAutoFlush(table);\r\n     }</pre>\r\n\r\n<p>一旦你在程序中使用原生的HTableInterface，则默认不再受到Parrot的管理，所有的资源则需要自己释放，所有的赋值操作则需要自己手动完成，Parrot将不会再负责结果集映射。</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>五、</strong><strong>Parrot</strong><strong>中被废弃的事物操作</strong></p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;刚开始设计Parrot的时候，我的想象非常美好。那就是在Parrot中添加事物支持，哪怕是&ldquo;伪事物&rdquo;也可以。但这一切都是错误的开始。</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;我们知道HBase0.94版本之前，可以说是根本没有提供事物这个操作的，但0.94版本之后却可以支持弱事物，所谓弱事物指的就是支持同一行中的多个put或delete操作，但跨行、跨表、跨Region则不行，那么我当时的思路是提供Annotation的方式实现事物的AOP横切管理，当有多个事物执行的时候，无论是否在同一个表或者同一个region中，我们只需要做到put或delete失败就回滚，回滚的操作比较复杂，put的话就对应delete，delete就对应put，这样一来就无需顾虑是否是跨行、跨表、跨Region了。</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;想象是美好的，但现实的残酷是，delete失败后，执行回滚，我不仅要保存delete之前的数据状态，且回滚时，我如何保证数据正确落入到删除之前的region中？如何确保插入的时间戳与数据真实insert前是一致的？等等这些问题折腾了一天，所以彻底死心宣布Parrot废弃事物，目前只能等待后续HBase版本的更新支持是事物后，再说！</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>六、</strong><strong>Parrot</strong><strong>的设计实现；</strong></p>\r\n\r\n<p>没时间写了，以后再说，主要是没建模工具，懒得画图。</p>\r\n', '23', '0', '0', 'HBase', '2014-05-28 15:53:48');
INSERT INTO `article` VALUES ('50', '2', 'API设计与性能', '企业架构', 'API', '<p><span style=\"font-size:16px\"><span style=\"color:rgb(0, 0, 0); font-family:helvetica,tahoma,arial,sans-serif\">当你设计新的API时你需要做很多决策。一般都是基于大量的设计原则来做出的这些决策。Joshua Bloch在他的</span><a href=\"http://s.deepinmind.com/ppt/2014/05/28/how-to-design-a-good-api.html\" style=\"color: rgb(16, 138, 198); font-family: Helvetica, Tahoma, Arial, sans-serif; font-size: 14px; line-height: 25.200000762939453px;\" target=\"_blank\">报告</a><span style=\"color:rgb(0, 0, 0); font-family:helvetica,tahoma,arial,sans-serif\">中总结了一些。他提到的主要原则有以下这些：&nbsp;</span></span></p>\r\n\r\n<ul>\r\n	<li><span style=\"font-size:16px\">易于学习</span></li>\r\n	<li><span style=\"font-size:16px\">易于使用</span></li>\r\n	<li><span style=\"font-size:16px\">不易误用</span></li>\r\n	<li><span style=\"font-size:16px\">写出的代码易于阅读及维护</span></li>\r\n	<li><span style=\"font-size:16px\">足够强大，能满足需求</span></li>\r\n	<li><span style=\"font-size:16px\">易于扩展</span></li>\r\n	<li><span style=\"font-size:16px\">对使用者友好</span></li>\r\n</ul>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:16px\"><span style=\"color:rgb(0, 0, 0); font-family:helvetica,tahoma,arial,sans-serif\">从上面这个列表可以看到，Joshua Bloch强调的是可读性和易用性。但这个列表中完全忽略了的一点就是性能。不过性能会影响到你的设计 吗？&nbsp;</span><br />\r\n&nbsp;</span></p>\r\n\r\n<p><span style=\"font-size:16px\"><span style=\"color:rgb(0, 0, 0); font-family:helvetica,tahoma,arial,sans-serif\">要回答这个问题，我们先来设计一个API的简单的用例，然后再测试它的性能。这样我们可以根据结果，来看下API的设计是否会对性能产生影响。作为例子，我们使用的是一个经典的从服务或者存储中加载一个客户列表的用例。我们需要考虑的是并不是所有的用户都能执行这个操作。因此，我们必须实现某种权限检查。要实现这个检查并将信息返回给调用方，我们有好几种实现的方式 。我们首先来尝试下这个：&nbsp;</span></span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<pre class=\"brush:java;\">\r\nList&lt;Customer&gt; loadCustomersWithException() throws PermissionDeniedException  </pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:16px\"><span style=\"color:rgb(0, 0, 0); font-family:helvetica,tahoma,arial,sans-serif\">这里如果调用方没有权限来获取客户列表的话，我们给它定义了一个显式的异常。方法返回的是一个客户的列表，由于我们假设可以从某个容器或者ThreadLocal的实现中获取到用户，因此在没有在方法参数中传入用户信息。&nbsp;</span><br />\r\n<br />\r\n<span style=\"color:rgb(0, 0, 0); font-family:helvetica,tahoma,arial,sans-serif\">上述方法的签名很方便使用，同时也很难用错。使用了这个方法的代码看起来会是这样的：&nbsp;</span></span></p>\r\n\r\n<pre class=\"brush:java;\">\r\ntry {  \r\n        List&lt;Customer&gt; customerList = api.loadCustomersWithException();  \r\n    doSomething(customerList);  \r\n} catch (PermissionDeniedException e) {  \r\n    handleException();  \r\n}  </pre>\r\n\r\n<p>&nbsp;</p>\r\n', '16', '0', '0', 'api', '2014-05-28 16:03:01');
INSERT INTO `article` VALUES ('51', '3', 'Android自定义动画学习，实现左右摇摆动画', '移动开发', 'android', '<p><span style=\"font-size:16px\"><span style=\"color:rgb(0, 0, 0); font-family:helvetica,tahoma,arial,sans-serif\">我们都知道Android SDK给我们提供了4种常用的动画效果分别是：</span><br />\r\n<br />\r\n<span style=\"color:rgb(0, 0, 0); font-family:helvetica,tahoma,arial,sans-serif\">AlphaAnimation：透明度变化动画</span><br />\r\n<br />\r\n<span style=\"color:rgb(0, 0, 0); font-family:helvetica,tahoma,arial,sans-serif\">RotateAnimation：旋转动画</span><br />\r\n<br />\r\n<span style=\"color:rgb(0, 0, 0); font-family:helvetica,tahoma,arial,sans-serif\">ScaleAnimation： 缩放动画</span><br />\r\n<br />\r\n<span style=\"color:rgb(0, 0, 0); font-family:helvetica,tahoma,arial,sans-serif\">TranslateAnimation：位置变化动画</span><br />\r\n<br />\r\n<span style=\"color:rgb(0, 0, 0); font-family:helvetica,tahoma,arial,sans-serif\">但有时这些动画不能满足我们的要求，所以我们要通过自定义动画的手段来实现我们个性化的动画。</span><br />\r\n<br />\r\n<span style=\"color:rgb(0, 0, 0); font-family:helvetica,tahoma,arial,sans-serif\">学习自定义动画很简单，我们可以参考上面这些SDK中动画类，看它们是如何实现的。就以RotateAnimation为例:</span></span></p>\r\n\r\n<pre class=\"brush:java;\">\r\npublic class RotateAnimation extends Animation {  \r\n    private float mFromDegrees;  \r\n    private float mToDegrees;  \r\n  \r\n    private int mPivotXType = ABSOLUTE;  \r\n    private int mPivotYType = ABSOLUTE;  \r\n    private float mPivotXValue = 0.0f;  \r\n    private float mPivotYValue = 0.0f;  \r\n  \r\n    private float mPivotX;  \r\n    private float mPivotY;  \r\n  \r\n      \r\n    public RotateAnimation(Context context, AttributeSet attrs) {  \r\n        super(context, attrs);  \r\n        // 省略 初始化变量那些事  \r\n    }  \r\n   \r\n    public RotateAnimation(float fromDegrees, float toDegrees) {  \r\n        // 省略 初始化变量那些事  \r\n    }  \r\n  \r\n    public RotateAnimation(float fromDegrees, float toDegrees, float pivotX, float pivotY) {  \r\n        // 省略 初始化变量那些事  \r\n    }  \r\n  \r\n    public RotateAnimation(float fromDegrees, float toDegrees, int pivotXType, float pivotXValue,  \r\n            int pivotYType, float pivotYValue) {  \r\n       // 省略 初始化变量那些事  \r\n    }  \r\n  \r\n    private void initializePivotPoint() {  \r\n        if (mPivotXType == ABSOLUTE) {  \r\n            mPivotX = mPivotXValue;  \r\n        }  \r\n        if (mPivotYType == ABSOLUTE) {  \r\n            mPivotY = mPivotYValue;  \r\n        }  \r\n    }  \r\n  \r\n    @Override  \r\n    protected void applyTransformation(float interpolatedTime, Transformation t) {  \r\n        float degrees = mFromDegrees + ((mToDegrees - mFromDegrees) * interpolatedTime);  \r\n        float scale = getScaleFactor();  \r\n          \r\n        if (mPivotX == 0.0f &amp;&amp; mPivotY == 0.0f) {  \r\n            t.getMatrix().setRotate(degrees);  \r\n        } else {  \r\n            t.getMatrix().setRotate(degrees, mPivotX * scale, mPivotY * scale);  \r\n        }  \r\n    }  \r\n  \r\n    @Override  \r\n    public void initialize(int width, int height, int parentWidth, int parentHeight) {  \r\n        super.initialize(width, height, parentWidth, parentHeight);  \r\n        mPivotX = resolveSize(mPivotXType, mPivotXValue, width, parentWidth);  \r\n        mPivotY = resolveSize(mPivotYType, mPivotYValue, height, parentHeight);  \r\n    }  \r\n}  </pre>\r\n\r\n<p>&nbsp;</p>\r\n', '29', '0', '0', 'android', '2014-06-01 23:50:07');
INSERT INTO `article` VALUES ('52', '3', 'Android 单选按钮Radio的使用', '移动开发', 'android', '<p><span style=\"font-size:16px\"><span style=\"color:rgb(0, 0, 0); font-family:helvetica,tahoma,arial,sans-serif\">布局文件&nbsp;</span></span></p>\r\n\r\n<pre class=\"brush:xml;\">\r\n&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;  \r\n&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;  \r\n    android:layout_width=&quot;match_parent&quot;  \r\n    android:layout_height=&quot;match_parent&quot;  \r\n    android:orientation=&quot;vertical&quot; &gt;  \r\n  \r\n    &lt;RadioGroup  \r\n        android:id=&quot;@+id/radio_group_id&quot;  \r\n        android:layout_width=&quot;wrap_content&quot;  \r\n        android:layout_height=&quot;wrap_content&quot;  \r\n        android:orientation=&quot;horizontal&quot; &gt;  \r\n  \r\n        &lt;RadioButton  \r\n            android:id=&quot;@+id/male_id&quot;  \r\n            android:layout_width=&quot;wrap_content&quot;  \r\n            android:layout_height=&quot;wrap_content&quot;  \r\n            android:text=&quot;男&quot; /&gt;  \r\n  \r\n        &lt;RadioButton  \r\n            android:id=&quot;@+id/female_id&quot;  \r\n            android:layout_width=&quot;wrap_content&quot;  \r\n            android:layout_height=&quot;wrap_content&quot;  \r\n            android:text=&quot;女&quot; /&gt;  \r\n    &lt;/RadioGroup&gt;  \r\n  \r\n&lt;/LinearLayout&gt;</pre>\r\n\r\n<p><span style=\"font-size:16px\"><span style=\"color:rgb(0, 0, 0); font-family:helvetica,tahoma,arial,sans-serif\">控制文件&nbsp;</span></span></p>\r\n\r\n<pre class=\"brush:java;\">\r\npackage com.geoffrey.practice_radio;  \r\n  \r\nimport android.os.Bundle;  \r\nimport android.support.v7.app.ActionBarActivity;  \r\nimport android.widget.RadioButton;  \r\nimport android.widget.RadioGroup;  \r\nimport android.widget.RadioGroup.OnCheckedChangeListener;  \r\n  \r\npublic class MainActivity extends ActionBarActivity {  \r\n    private RadioGroup radioGroup;  \r\n    private RadioButton maleRadioButton;  \r\n    private RadioButton femaleRadioButton;  \r\n  \r\n    @Override  \r\n    protected void onCreate(Bundle savedInstanceState) {  \r\n        super.onCreate(savedInstanceState);  \r\n        setContentView(R.layout.activity_radio);  \r\n  \r\n        radioGroup = (RadioGroup) findViewById(R.id.radio_group_id);  \r\n        maleRadioButton = (RadioButton) findViewById(R.id.male_id);  \r\n        femaleRadioButton = (RadioButton) findViewById(R.id.female_id);  \r\n  \r\n        RadioGroupListener listener = new RadioGroupListener();  \r\n        radioGroup.setOnCheckedChangeListener(listener);  \r\n  \r\n    }  \r\n  \r\n    class RadioGroupListener implements OnCheckedChangeListener {  \r\n  \r\n        @Override  \r\n        public void onCheckedChanged(RadioGroup group, int checkedId) {  \r\n            if (checkedId == maleRadioButton.getId()) {  \r\n                System.out.println(&quot;选择男&quot;);  \r\n            } else if (checkedId == femaleRadioButton.getId()) {  \r\n                System.out.println(&quot;选择女&quot;);  \r\n            }  \r\n        }  \r\n  \r\n    }  \r\n  \r\n}  </pre>\r\n\r\n<p>&nbsp;</p>\r\n', '10', '0', '0', 'android', '2014-06-01 23:58:58');
INSERT INTO `article` VALUES ('53', '4', '你还在为挑选IDE犯愁么?', '行业应用', '应用', '<p><span style=\"font-size:16px\"><span style=\"color:rgb(0, 0, 0); font-family:helvetica,tahoma,arial,sans-serif\">如果你还在为挑选IDE犯愁,就看看这里：</span></span></p>\r\n\r\n<p><a href=\"http://en.wikipedia.org/wiki/Comparison_of_integrated_development_environments\">http://en.wikipedia.org/wiki/Comparison_of_integrated_development_environments</a></p>\r\n', '0', '0', '0', '', '2014-06-02 12:28:24');
INSERT INTO `article` VALUES ('54', '4', 'DWR的回调', '开源软件', 'DWR', '<pre class=\"brush:java;\">\r\npublic class SimpleCallback   \r\n{  \r\n    public String hello(String name)  \r\n    {  \r\n        return name+&quot;简单回调与json回调&quot;;  \r\n    }  \r\n} </pre>\r\n\r\n<p><span style=\"font-size:16px\">SimpleCallBack对应的javascript对象为hello</span></p>\r\n\r\n<p><span style=\"font-size:16px\">简单回调：</span></p>\r\n\r\n<pre class=\"brush:javafx;\">\r\n//data为服务器响应数据  \r\nfunction callbac(data)  \r\n{  \r\n    alert(data);  \r\n}  \r\n//javascript调用  \r\nhello.hello(&quot;wang&quot;,callbac);</pre>\r\n\r\n<p><span style=\"font-size:16px\"><span style=\"color:rgb(0, 0, 0); font-family:helvetica,tahoma,arial,sans-serif\">也可使用匿名回调：</span></span></p>\r\n\r\n<pre class=\"brush:jscript;\">\r\nhello.hello(&quot;wang&quot;,function(data)  \r\n        {  \r\n            alert(data);  \r\n        });  </pre>\r\n\r\n<p><span style=\"font-size:16px\"><span style=\"color:rgb(0, 0, 0); font-family:helvetica,tahoma,arial,sans-serif\">json回调：</span></span></p>\r\n\r\n<pre class=\"brush:jscript;\">\r\nhello.hello(&quot;wang&quot;,  \r\n    {  \r\n        callback:cb,  \r\n        timeout:5000,  \r\n        errorHandler:function(message){alert(&quot;错误提示:&quot;+message);},  \r\n        warningHandler:function(message){alert(&quot;Oops:&quot;+message);},  \r\n        textHtmlHandler:function(message){alert(&quot;Oops:&quot;+message);},  \r\n        exceptionHandler:function(message){alert(&quot;Oops:&quot;+message);},  \r\n        httpMethod:&#39;POST&#39;,  \r\n        async:true,  \r\n        rpcType:dwr.engine.XMLHttpRequest,  \r\n        preHook:function(){alert(&#39;远程调用之前&#39;);},  \r\n        postHook:function(){alert(&#39;远程调用之后&#39;);}  \r\n    });  \r\nfunction cb(data)  \r\n{  \r\n      alert(data);  \r\n} </pre>\r\n\r\n<p><span style=\"font-size:16px\"><span style=\"color:rgb(0, 0, 0); font-family:helvetica,tahoma,arial,sans-serif\">回调函数只有一个参数，如果需要将客户端的其他javascript变量也传入回调函数，应使用适配器模式：</span></span></p>\r\n\r\n<pre class=\"brush:jscript;\">\r\nvar fromBrowser = &quot;客户端变量&quot;;  \r\nfunction sendMessage()  \r\n  {  \r\n    hello.hello(&quot;wang&quot;,  \r\n    {  \r\n        callback:cb,  \r\n        timeout:5000,  \r\n        errorHandler:function(message){alert(&quot;错误提示:&quot;+message);},  \r\n        warningHandler:function(message){alert(&quot;Oops:&quot;+message);},  \r\n        textHtmlHandler:function(message){alert(&quot;Oops:&quot;+message);},  \r\n        exceptionHandler:function(message){alert(&quot;Oops:&quot;+message);},  \r\n        httpMethod:&#39;POST&#39;,  \r\n        async:true,  \r\n        rpcType:dwr.engine.XMLHttpRequest,  \r\n        preHook:function(){alert(&#39;远程调用之前&#39;);},  \r\n        postHook:function(){alert(&#39;远程调用之后&#39;);}  \r\n    });  \r\n  }  \r\n  function cb(data)  \r\n  {  \r\n      db(data , fromBrowser);  \r\n  }  \r\n  function db(data , fromBrowser)  \r\n  {  \r\n      document.getElementById(&quot;show&quot;).innerHTML=data;  \r\n      alert(fromBrowser);  \r\n  } </pre>\r\n\r\n<p>&nbsp;</p>\r\n', '0', '0', '0', 'DWR', '2014-06-02 12:35:00');
INSERT INTO `article` VALUES ('55', '1', '[节日快乐]祝大家儿童节和端午节快乐', '非技术', '生活', '<p><span style=\"font-size:16px\"><span style=\"color:rgb(0, 0, 0); font-family:helvetica,tahoma,arial,sans-serif\">今天是6.1国际儿童节,明天是中国的端午节........COMSCI在这里祝小朋友们得到自己喜欢的礼物,大朋友们拿到节日礼金............&nbsp;</span></span><br />\r\n&nbsp;</p>\r\n\r\n<p><img alt=\"\" src=\"http://lys:8080/IT_BBS/images/e7fc9f41-1857-36e4-878f-18548a5bb30f.jpg\" style=\"height:360px; width:550px\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><img alt=\"\" src=\"http://lys:8080/IT_BBS/images/7f11ba4a-1d4a-3f71-bcae-846405bfa115.jpg\" style=\"height:219px; width:369px\" /></p>\r\n', '0', '0', '0', '', '2014-06-02 13:01:50');
INSERT INTO `article` VALUES ('56', '21', '自己动手写GC', '开源软件', 'GC', '<p><span style=\"color:rgb(0, 0, 0); font-family:helvetica,tahoma,arial,sans-serif; font-size:14px\">有时候事情多得我喘不过气来的时候，我会出现一种异常反应，好像找点别的事做，就能远离烦恼了。通常我会写些自己能完成的独立的小程序。&nbsp;</span><br />\r\n<br />\r\n<span style=\"color:rgb(0, 0, 0); font-family:helvetica,tahoma,arial,sans-serif; font-size:14px\">有一天早上，我正在写的书，工作中的事情，还有要为Strang Loop准备的</span><a href=\"http://it.deepinmind.com/\" style=\"color: rgb(16, 138, 198); font-family: Helvetica, Tahoma, Arial, sans-serif; font-size: 14px; line-height: 25.200000762939453px;\" target=\"_blank\">分享</a><span style=\"color:rgb(0, 0, 0); font-family:helvetica,tahoma,arial,sans-serif; font-size:14px\">，这些东西让我感到快崩溃了，突然间我想到，&ldquo;我要写一个垃圾回收程序&rdquo;。&nbsp;</span><br />\r\n<br />\r\n<span style=\"color:rgb(0, 0, 0); font-family:helvetica,tahoma,arial,sans-serif; font-size:14px\">是的，我知道这听起来有点疯狂。不过你可以把我这个神经的想法当成是一份编程语言基础的免费教程。通过百来行普通的C代码，我实现了一个标记删除的收集器，你懂的，它确实能回收内存。&nbsp;</span><br />\r\n<br />\r\n<span style=\"color:rgb(0, 0, 0); font-family:helvetica,tahoma,arial,sans-serif; font-size:14px\">在程序开发领域，垃圾回收就像一片鲨鱼出没的水域，不过在本文中，这只是个儿童池，你可以随意玩耍。（说不定还是会有鲨鱼，不过至少水浅多了不是？）&nbsp;</span><br />\r\n<br />\r\n<br />\r\n<strong>少用，重用，循环用</strong><span style=\"color:rgb(0, 0, 0); font-family:helvetica,tahoma,arial,sans-serif; font-size:14px\">&nbsp;</span><br />\r\n<br />\r\n<span style=\"color:rgb(0, 0, 0); font-family:helvetica,tahoma,arial,sans-serif; font-size:14px\">垃圾回收思想是源于编程语言似乎需要无穷尽的内存。开发人员可以一直一直的分配内存，它就像是魔法一般，永远不会失败。&nbsp;</span><br />\r\n<br />\r\n<span style=\"color:rgb(0, 0, 0); font-family:helvetica,tahoma,arial,sans-serif; font-size:14px\">当然了，机器的内存不可能是无限的。所以解决办法就是，当程序需要分配内存并且意识到内存已经不足了，它开始进行垃圾回收。&nbsp;</span><br />\r\n<br />\r\n<span style=\"color:rgb(0, 0, 0); font-family:helvetica,tahoma,arial,sans-serif; font-size:14px\">在这里，&ldquo;垃圾&rdquo;是指那些已经分配出去但现在不再使用的内存。为了让内存看起来是取之不尽的，语言本身对于什么是&ldquo;不再使用的&rdquo;应当十分谨慎。不然的话当你的程序正要访问那些对象的时候，你却要回收它们，这可不是闹着玩的。&nbsp;</span><br />\r\n<br />\r\n<span style=\"color:rgb(0, 0, 0); font-family:helvetica,tahoma,arial,sans-serif; font-size:14px\">为了能进行垃圾回收，语言本身得确定程序无法再使用这些对象。如果拿不到对象的引用，当然也就无法使用它们了。那么定义什么是&ldquo;在使用中的&rdquo;就很简单了：&nbsp;</span><br />\r\n<br />\r\n<span style=\"color:rgb(0, 0, 0); font-family:helvetica,tahoma,arial,sans-serif; font-size:14px\">1. 如果对象被作用域中的变量引用的话，那么它就是在使用中的；&nbsp;</span><br />\r\n<span style=\"color:rgb(0, 0, 0); font-family:helvetica,tahoma,arial,sans-serif; font-size:14px\">2. 如果对象被在使用中的对象引用的话，那么它也是在使用中的。&nbsp;</span><br />\r\n<br />\r\n<span style=\"color:rgb(0, 0, 0); font-family:helvetica,tahoma,arial,sans-serif; font-size:14px\">第二条规则是递归的。如果对象A被一个变量引用，并且它有个字段引用了对象B，那么B也是正在使用中的，因为通过A你能对它进行访问。&nbsp;</span><br />\r\n<br />\r\n<span style=\"color:rgb(0, 0, 0); font-family:helvetica,tahoma,arial,sans-serif; font-size:14px\">最后就是一张可达对象的图了&mdash;&mdash;以一个变量为起点，你能够遍历到的所有对象。不在这张可达对象图里的对象对程序来说都是没用的，那么它占有的内存就可以回收了。&nbsp;</span><br />\r\n<br />\r\n<strong>标记-清除</strong><span style=\"color:rgb(0, 0, 0); font-family:helvetica,tahoma,arial,sans-serif; font-size:14px\">&nbsp;</span><br />\r\n<br />\r\n<span style=\"color:rgb(0, 0, 0); font-family:helvetica,tahoma,arial,sans-serif; font-size:14px\">查找及回收无用对象的方法有很多种，最简单也是最早的一种方法，叫&ldquo;标记-清除法&rdquo;。它是由John McCathy发明的，他同时还发明了Lisp和beards，因此你用它来实现的话就像是和远古大神交流一般，不过希望你可不要被他那套给洗脑了。&nbsp;</span><br />\r\n<br />\r\n<span style=\"color:rgb(0, 0, 0); font-family:helvetica,tahoma,arial,sans-serif; font-size:14px\">这和我们定义可达性的过程简直是一样的：&nbsp;</span><br />\r\n<br />\r\n<span style=\"color:rgb(0, 0, 0); font-family:helvetica,tahoma,arial,sans-serif; font-size:14px\">1. 从根对象开始，遍历整个对象图。每访问一个对象，就把一个标记位设成true。&nbsp;</span><br />\r\n<span style=\"color:rgb(0, 0, 0); font-family:helvetica,tahoma,arial,sans-serif; font-size:14px\">2. 一旦完成遍历，找出所有没有被标记过的对象，并清除掉它们。&nbsp;</span><br />\r\n<br />\r\n<span style=\"color:rgb(0, 0, 0); font-family:helvetica,tahoma,arial,sans-serif; font-size:14px\">这样就OK了。你肯定觉得这些你也能想到吧？如果你早点想到，你写的这个论文可能就被无数人引用了。要知道，想在计算机界混出点名堂，你根本不需要有什么特别天才的想法，蠢主意也行，只要你是第一个提出来的。&nbsp;</span><br />\r\n<br />\r\n<strong>一组对象</strong><span style=\"color:rgb(0, 0, 0); font-family:helvetica,tahoma,arial,sans-serif; font-size:14px\">&nbsp;</span><br />\r\n<br />\r\n<span style=\"color:rgb(0, 0, 0); font-family:helvetica,tahoma,arial,sans-serif; font-size:14px\">在我们开始实现这两点前，让我们先做一些准备工作。我们并不是要真正去实现一门语言的解释器&mdash;&mdash;没有解析器，字节码或者任何这些破玩意儿&mdash;&mdash;不过我们确实需要写一点代码，生成一些垃圾，这样我们才有东西可回收。</span><br />\r\n<br />\r\n<span style=\"color:rgb(0, 0, 0); font-family:helvetica,tahoma,arial,sans-serif; font-size:14px\">假设我们正在写一门小语言的解释器。它是动态类型的，有两种对象：int以及pair。下面是一个定义对象类型的枚举：&nbsp;</span></p>\r\n\r\n<pre class=\"brush:java;\">\r\ntypedef enum {  \r\n  OBJ_INT,  \r\n  OBJ_PAIR  \r\n} ObjectType;  </pre>\r\n\r\n<p><span style=\"color:rgb(0, 0, 0); font-family:helvetica,tahoma,arial,sans-serif; font-size:14px\">一对(pair)对象可以是任意类型的，比如两个int，一个int一个pair，什么都行。有这些就足够你用的了。由于VM机里的对象可是是这些中的任意一种，在C里面典型的实现方式是使用一个标记联合(tagged union)。&nbsp;</span><br />\r\n<br />\r\n<span style=\"color:rgb(0, 0, 0); font-family:helvetica,tahoma,arial,sans-serif; font-size:14px\">我们来实现一下它：&nbsp;</span></p>\r\n\r\n<p>&nbsp;</p>\r\n', '0', '0', '0', 'gc', '2014-06-03 20:43:11');
INSERT INTO `article` VALUES ('57', '5', 'NodeJs 合并文件', 'Web前端', 'Nodes', '<pre class=\"brush:jscript;\">\r\nvar fs = require(&quot;fs&quot;),  \r\n    path = require(&quot;path&quot;),  \r\n    http = require(&quot;http&quot;);  \r\n      \r\nvar MIME = {  \r\n    &#39;.css&#39;:&#39;text/css&#39;,  \r\n    &#39;.js&#39;:&#39;application/javascript&#39;  \r\n}  \r\n/** \r\n *合并文件  \r\n * @param {Object} pathnames \r\n * @param {Object} callback \r\n */  \r\nfunction combinFiles(pathnames,callback){  \r\n    var output = [];  \r\n      \r\n    (function next(i,len){  \r\n        if(i&lt;len){  \r\n            fs.readFile(pathnames[i],function (err,data){  \r\n                if(err){  \r\n                    callback(err)  \r\n                }else{  \r\n                    output.push(data);  \r\n                    next(i+1,len)  \r\n                }  \r\n            });  \r\n        }else{  \r\n            callback(null,Buffer.concat(output));  \r\n        }  \r\n    }(0,pathnames.length));  \r\n}  \r\n  \r\n/** \r\n *主函数  \r\n * @param {Object} argv \r\n */  \r\nfunction main(argv){  \r\n    //var config = require(&#39;./config.json&#39;),  \r\n    var config = JSON.parse(fs.readFileSync(argv[0],&#39;utf-8&#39;)),  \r\n        root = config.root || &#39;.&#39;,  \r\n        port = config.port || 8080;  \r\n          \r\n    http.createServer(function (req,resp){  \r\n        var urlInfo = parseURL(root,req.url);  \r\n          \r\n        combinFiles(urlInfo.pathnames,function (err,data){  \r\n            if(err){  \r\n                 resp.writeHead(404);  \r\n                 resp.end(err.message);  \r\n            }else{  \r\n                resp.writeHead(200,{  \r\n                    &quot;Content-Type&quot;:urlInfo.mine  \r\n                });  \r\n                resp.end(data);  \r\n            }  \r\n        });  \r\n    }).listen(port);  \r\n}  \r\n  \r\n/** \r\n *解析url地址  \r\n */  \r\nfunction parseURL(root,url){  \r\n    var base,pathnames,parts;  \r\n      \r\n    if(url.indexOf(&quot;??&quot;) === -1){  \r\n        url  = url.replace(&quot;/&quot;,&quot;/??&quot;);  \r\n    }  \r\n      \r\n    parts = url.split(&quot;??&quot;);  \r\n      \r\n    base = parts[0];  \r\n      \r\n    pathnames = parts[1].split(&quot;,&quot;).map(function(value){  \r\n        return path.join(root,base,value);  \r\n    });  \r\n      \r\n    return {  \r\n        mime:MIME[path.extname(pathnames[0])] || &#39;text/plan&#39;,  \r\n        pathnames:pathnames  \r\n    }  \r\n}  \r\n  \r\nmain(process.argv.slice(2));  </pre>\r\n\r\n<p>config.json</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp;{&ldquo;port&rdquo;:&ldquo;8080&rdquo;}</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; 启动服务</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp;node server.js config.json</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp;浏览器测试</p>\r\n\r\n<p>&nbsp; &nbsp;&nbsp;http://localhost:8080/??server.js,temp.js</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>优化版的server.js</p>\r\n\r\n<pre class=\"brush:jscript;\">\r\nvar fs = require(&quot;fs&quot;),  \r\npath = require(&quot;path&quot;),  \r\nhttp = require(&quot;http&quot;);  \r\n   \r\nvar MIME = {  \r\n    &#39;.css&#39;: &#39;text/css&#39;,  \r\n    &#39;.js&#39;: &#39;application/javascript&#39;  \r\n}  \r\n/** \r\n *合并文件  \r\n * @param {Object} pathnames \r\n * @param {Object} callback \r\n */  \r\nfunction combinFiles(pathnames, callback) {  \r\n    var output = [];  \r\n   \r\n    (function next(i, len) {  \r\n        if (i &lt; len) {  \r\n            fs.readFile(pathnames[i],  \r\n            function(err, data) {  \r\n                if (err) {  \r\n                    callback(err)  \r\n                } else {  \r\n                    output.push(data);  \r\n                    next(i + 1, len)  \r\n                }  \r\n            });  \r\n        } else {  \r\n            callback(null, Buffer.concat(output));  \r\n        }  \r\n    } (0, pathnames.length));  \r\n}  \r\n   \r\n/** \r\n *主函数  \r\n * @param {Object} argv \r\n */  \r\nfunction main(argv) {  \r\n    var config = JSON.parse(fs.readFileSync(argv[0], &#39;utf-8&#39;)),  \r\n    root = config.root || &#39;.&#39;,  \r\n    port = config.port || 8080;  \r\n   \r\n    http.createServer(function(req, resp) {  \r\n        var urlInfo = parseURL(root, req.url);  \r\n   \r\n        validateFiles(urlInfo.pathnames,  \r\n        function(err, pathnames) {  \r\n            if (err) {  \r\n                resp.writeHead(404);  \r\n                resp.end(err.message);  \r\n            } else {  \r\n                resp.writeHead(200, {  \r\n                    &quot;Content-Type&quot;: urlInfo.mime  \r\n                });  \r\n                outputFiles(pathnames, resp);  \r\n            }  \r\n        });  \r\n    }).listen(port);  \r\n}  \r\n/** \r\n *输出文件  \r\n */  \r\nfunction outputFiles(pathnames, writer) {   \r\n(function next(i, len) {  \r\n        if (i &lt; len) {  \r\n            var reader = fs.createReadStream(pathnames[i]);  \r\n              \r\n            reader.pipe(writer, {  \r\n                end: false  \r\n            });  \r\n              \r\n            reader.on(&quot;end&quot;,  \r\n            function() {  \r\n                next(i + 1, len);  \r\n            })  \r\n        } else {  \r\n            writer.end();  \r\n        }  \r\n    }) (0, pathnames.length);  \r\n}  \r\n   \r\n/** \r\n * 验证文件 \r\n */  \r\nfunction validateFiles(pathnames, callback) {   \r\n(function next(i, len) {  \r\n        if (i &lt; len) {  \r\n            fs.stat(pathnames[i],  \r\n            function(err, stats) {  \r\n                if (err) {  \r\n                    callback(err);  \r\n                } else if (!stats.isFile()) {  \r\n                    callback(new Error());  \r\n                } else {  \r\n                    next(i + 1, len);  \r\n                }  \r\n            })  \r\n        } else {  \r\n            callback(null, pathnames);  \r\n        }  \r\n    })(0, pathnames.length);  \r\n}  \r\n/** \r\n *解析url地址  \r\n */  \r\nfunction parseURL(root, url) {  \r\n    var base, pathnames, parts;  \r\n   \r\n    if (url.indexOf(&quot;??&quot;) === -1) {  \r\n        url = url.replace(&quot;/&quot;, &quot;/??&quot;);  \r\n    }  \r\n   \r\n    parts = url.split(&quot;??&quot;);  \r\n   \r\n    base = parts[0];  \r\n   \r\n    pathnames = parts[1].split(&quot;,&quot;).map(function(value) {  \r\n        return path.join(root, base, value);  \r\n    });  \r\n   \r\n    return {  \r\n        mime: MIME[path.extname(pathnames[0])] || &#39;text/plan&#39;,  \r\n        pathnames: pathnames  \r\n    }  \r\n}  \r\n   \r\nmain(process.argv.slice(2));  </pre>\r\n\r\n<p>&nbsp;</p>\r\n', '0', '0', '0', 'node', '2014-06-03 20:56:37');
INSERT INTO `article` VALUES ('58', '5', '并发编程 — 详解线程池', '编程语言', 'java', '<p><span style=\"font-size:14px\"><strong><span style=\"color:red\">本文将讲述如何通过JDK提供的API自定义定制的线程池</span></strong><span style=\"color:rgb(0, 0, 0); font-family:helvetica,tahoma,arial,sans-serif\">&nbsp;</span></span></p>\r\n\r\n<pre class=\"brush:java;\">\r\n//固定线程数 -- FixedThreadPool  \r\npublic static ExecutorService newFixedThreadPool(int nThreads) {  \r\n    return new ThreadPoolExecutor(nThreads, nThreads, 0L, TimeUnit.MILLISECONDS,  \r\n            new LinkedBlockingQueue&lt;Runnable&gt;());  \r\n}  \r\n  \r\n//单条线程  --  SingleThreadExecutor  \r\npublic static ExecutorService newSingleThreadExecutor() {  \r\n    return new FinalizableDelegatedExecutorService(new ThreadPoolExecutor(1, 1, 0L,  \r\n            TimeUnit.MILLISECONDS, new LinkedBlockingQueue&lt;Runnable&gt;()));  \r\n}  \r\n  \r\n//线程数自增长    --  CachedThreadPool  \r\npublic static ExecutorService newCachedThreadPool() {  \r\n    return new ThreadPoolExecutor(0, Integer.MAX_VALUE, 60L, TimeUnit.SECONDS,  \r\n            new SynchronousQueue&lt;Runnable&gt;());  \r\n} </pre>\r\n\r\n<p><strong><span style=\"color:red\">从上面代码可以看出,通过Executors创建的三种线程池其实内部都是调用&nbsp;<br />\r\nThreadPoolExecutor进行创建</span></strong><span style=\"color:rgb(0, 0, 0); font-family:helvetica,tahoma,arial,sans-serif; font-size:large\">&nbsp;</span></p>\r\n\r\n<pre class=\"brush:java;\">\r\npublic ThreadPoolExecutor(int corePoolSize,  \r\n                              int maximumPoolSize,  \r\n                              long keepAliveTime,  \r\n                              TimeUnit unit,  \r\n                              BlockingQueue&lt;Runnable&gt; workQueue) {  \r\n        this(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue,  \r\n             Executors.defaultThreadFactory(), defaultHandler);  \r\n    }  </pre>\r\n\r\n<table class=\"bbcode\" style=\"border:1px solid rgb(204, 204, 204); color:rgb(0, 0, 0); font-family:helvetica,tahoma,arial,sans-serif; font-size:large; line-height:25.200000762939453px\">\r\n	<tbody>\r\n		<tr>\r\n			<td>corePoolSize</td>\r\n			<td>指定线程池中线程的数量</td>\r\n		</tr>\r\n		<tr>\r\n			<td>maximumPoolSize</td>\r\n			<td>指定线程池中最大线程数量</td>\r\n		</tr>\r\n		<tr>\r\n			<td>keepAliveTime</td>\r\n			<td>空闲线程存活时间,指超过corePoolSize的线程</td>\r\n		</tr>\r\n		<tr>\r\n			<td>unit</td>\r\n			<td>keepAliveTime的时间单位</td>\r\n		</tr>\r\n		<tr>\r\n			<td><strong><span style=\"color:red\">workQueue</span></strong></td>\r\n			<td><strong><span style=\"color:red\">任务队列,被提交但未被执行的任务存放容器</span></strong></td>\r\n		</tr>\r\n		<tr>\r\n			<td>threadFactory</td>\r\n			<td>线程创建工厂,请参考上一章</td>\r\n		</tr>\r\n		<tr>\r\n			<td><strong><span style=\"color:red\">handler</span></strong></td>\r\n			<td><strong><span style=\"color:red\">拒绝策略,当任务太多来不及处理时的拒绝策略</span></strong></td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n', '0', '0', '0', 'java', '2014-06-04 15:32:29');

-- ----------------------------
-- Table structure for `collect`
-- ----------------------------
DROP TABLE IF EXISTS `collect`;
CREATE TABLE `collect` (
  `collectId` int(11) NOT NULL AUTO_INCREMENT,
  `userId` int(11) DEFAULT NULL,
  `articleId` int(11) DEFAULT NULL,
  `collectTime` datetime DEFAULT NULL,
  `collectExplain` varchar(100) DEFAULT NULL,
  PRIMARY KEY (`collectId`),
  KEY `FK_Relationship_8` (`userId`),
  KEY `FK_Relationship_9` (`articleId`),
  CONSTRAINT `FK_Relationship_8` FOREIGN KEY (`userId`) REFERENCES `user` (`userId`),
  CONSTRAINT `FK_Relationship_9` FOREIGN KEY (`articleId`) REFERENCES `article` (`articleId`)
) ENGINE=InnoDB AUTO_INCREMENT=10 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of collect
-- ----------------------------
INSERT INTO `collect` VALUES ('1', '1', '48', '2014-05-28 22:32:42', null);
INSERT INTO `collect` VALUES ('3', '1', '47', '2014-05-28 03:15:38', null);
INSERT INTO `collect` VALUES ('4', '2', '50', '2014-06-01 20:03:39', null);
INSERT INTO `collect` VALUES ('5', '3', '48', '2014-06-01 20:48:11', null);
INSERT INTO `collect` VALUES ('6', '5', '52', '2014-06-04 15:14:23', null);
INSERT INTO `collect` VALUES ('7', '3', '54', '2014-06-04 15:25:08', null);
INSERT INTO `collect` VALUES ('8', '3', '53', '2014-06-04 15:25:32', null);
INSERT INTO `collect` VALUES ('9', '23', '56', '2014-06-04 17:12:41', null);

-- ----------------------------
-- Table structure for `comment`
-- ----------------------------
DROP TABLE IF EXISTS `comment`;
CREATE TABLE `comment` (
  `commentId` int(11) NOT NULL AUTO_INCREMENT,
  `userId` int(11) DEFAULT NULL,
  `articleId` int(11) DEFAULT NULL,
  `commentInfo` varchar(1024) DEFAULT NULL,
  `commentTime` datetime DEFAULT NULL,
  PRIMARY KEY (`commentId`),
  KEY `FK_Relationship_3` (`userId`),
  KEY `FK_Relationship_4` (`articleId`),
  CONSTRAINT `FK_Relationship_3` FOREIGN KEY (`userId`) REFERENCES `user` (`userId`),
  CONSTRAINT `FK_Relationship_4` FOREIGN KEY (`articleId`) REFERENCES `article` (`articleId`)
) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of comment
-- ----------------------------
INSERT INTO `comment` VALUES ('1', '1', '48', '<p>写的很好！</p>\r\n', '2014-05-28 13:02:13');
INSERT INTO `comment` VALUES ('2', '1', '48', '<pre class=\"brush:java;\">\r\npublic List&lt;Comment&gt; searchCommentByArticle(Integer articleId) {\r\n		Object[] params=null;\r\n		String selectHql=null;\r\n		selectHql=&quot;from Comment as c where c.article.articleId = &#39;&quot; + articleId + &quot;&#39; order by c.commentTime desc&quot;;\r\n		String countHql=&quot;select count(*) &quot;+selectHql;\r\n		List&lt;Comment&gt; list=PageService.searchByPage(selectHql, countHql, params, null, commentDAO);\r\n		return list;\r\n	}</pre>\r\n\r\n<p>&nbsp;</p>\r\n', '2014-05-28 13:38:40');
INSERT INTO `comment` VALUES ('3', '1', '47', '<p>学习了</p>\r\n', '2014-05-28 13:43:05');
INSERT INTO `comment` VALUES ('4', '5', '52', '<p><span style=\"font-size:16px\">学习了</span><img alt=\"yes\" src=\"http://lys:8080/IT_BBS/js/ckeditor/plugins/smiley/images/thumbs_up.png\" style=\"height:23px; width:23px\" title=\"yes\" /></p>\r\n', '2014-06-04 15:12:36');
INSERT INTO `comment` VALUES ('5', '23', '56', '<p>阿萨德发射点发斯蒂芬</p>\r\n\r\n<pre class=\"brush:as3;\">\r\npublic String loadUserMessage() throws Exception{\r\n		//判断是否已登录\r\n		Map&lt;String, Object&gt; session = ActionContext.getContext().getSession();\r\n		if(!session.containsKey(&quot;loginId&quot;)){\r\n			return &quot;fail&quot;;\r\n		}\r\n		userId = (Integer)session.get(&quot;loginId&quot;);\r\n		user=userService.loadUser(userId);\r\n		articleColl = articleService.searchBlogByUser(userId);\r\n		sortColl = sortService.searchSortByUser(userId);\r\n		return &quot;success&quot;;\r\n	}</pre>\r\n\r\n<p>&nbsp;</p>\r\n', '2014-06-04 17:13:00');

-- ----------------------------
-- Table structure for `download`
-- ----------------------------
DROP TABLE IF EXISTS `download`;
CREATE TABLE `download` (
  `downloadId` int(11) NOT NULL AUTO_INCREMENT,
  `resourceID` int(11) DEFAULT NULL,
  `userId` int(11) DEFAULT NULL,
  `downloadTime` datetime DEFAULT NULL,
  PRIMARY KEY (`downloadId`),
  KEY `FK_Relationship_13` (`userId`),
  KEY `FK_Relationship_14` (`resourceID`),
  CONSTRAINT `FK_Relationship_13` FOREIGN KEY (`userId`) REFERENCES `user` (`userId`),
  CONSTRAINT `FK_Relationship_14` FOREIGN KEY (`resourceID`) REFERENCES `resource` (`resourceID`)
) ENGINE=InnoDB AUTO_INCREMENT=33 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of download
-- ----------------------------
INSERT INTO `download` VALUES ('1', '1', '1', '2014-06-03 22:05:59');
INSERT INTO `download` VALUES ('2', '2', '1', '2014-06-03 22:52:31');
INSERT INTO `download` VALUES ('6', '1', '1', '2014-06-03 01:55:13');
INSERT INTO `download` VALUES ('7', '1', '1', '2014-06-03 01:55:14');
INSERT INTO `download` VALUES ('8', '1', '1', '2014-06-03 01:55:14');
INSERT INTO `download` VALUES ('9', '3', '1', '2014-06-03 14:02:09');
INSERT INTO `download` VALUES ('23', '3', '1', '2014-06-03 21:44:51');
INSERT INTO `download` VALUES ('24', '3', '1', '2014-06-03 22:20:37');
INSERT INTO `download` VALUES ('25', '3', '1', '2014-06-03 22:20:38');
INSERT INTO `download` VALUES ('26', '3', '1', '2014-06-03 22:20:39');
INSERT INTO `download` VALUES ('27', '3', '1', '2014-06-03 22:20:42');
INSERT INTO `download` VALUES ('28', '3', '1', '2014-06-03 22:20:43');
INSERT INTO `download` VALUES ('29', '2', '3', '2014-06-04 14:05:19');
INSERT INTO `download` VALUES ('30', '1', '1', '2014-06-04 16:42:34');
INSERT INTO `download` VALUES ('31', '3', '1', '2014-06-04 17:08:18');
INSERT INTO `download` VALUES ('32', '8', '24', '2014-06-04 17:22:17');

-- ----------------------------
-- Table structure for `photo`
-- ----------------------------
DROP TABLE IF EXISTS `photo`;
CREATE TABLE `photo` (
  `pictureId` int(11) NOT NULL AUTO_INCREMENT,
  `userId` int(11) DEFAULT NULL,
  `pictureName` varchar(20) DEFAULT NULL,
  `pictureUrl` varchar(255) DEFAULT NULL,
  `pictureDescription` varchar(100) DEFAULT NULL,
  `pictureUploadTime` datetime DEFAULT NULL,
  PRIMARY KEY (`pictureId`),
  KEY `FK_Relationship_5` (`userId`),
  CONSTRAINT `FK_Relationship_5` FOREIGN KEY (`userId`) REFERENCES `user` (`userId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of photo
-- ----------------------------

-- ----------------------------
-- Table structure for `post`
-- ----------------------------
DROP TABLE IF EXISTS `post`;
CREATE TABLE `post` (
  `postId` int(11) NOT NULL AUTO_INCREMENT,
  `userId` int(11) DEFAULT NULL,
  `postName` varchar(225) DEFAULT NULL,
  `postInfo` text,
  `answerNum` int(100) DEFAULT NULL,
  `postPraiseNum` int(50) DEFAULT NULL,
  `postReadNum` int(50) DEFAULT NULL,
  `postStatus` varchar(20) DEFAULT NULL,
  `postTime` datetime DEFAULT NULL,
  `praiseBean` int(11) DEFAULT NULL,
  PRIMARY KEY (`postId`),
  KEY `FK_Relationship_6` (`userId`),
  CONSTRAINT `FK_Relationship_6` FOREIGN KEY (`userId`) REFERENCES `user` (`userId`)
) ENGINE=InnoDB AUTO_INCREMENT=17 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of post
-- ----------------------------
INSERT INTO `post` VALUES ('1', '1', 'spring mvc 返回json 日期类型的解决方案？', '<p><span style=\"background-color:rgb(242, 248, 239); color:rgb(0, 0, 0); font-family:helvetica,tahoma,arial,sans-serif; font-size:16px\">根据现在网上的方法一种通过局部注解和全局转换，spring mvc 返回json中包含日期Date类型的，怎么区分日期2014-04-22 和日期加时间的2014-04-22 14:25 呢？？</span></p>\r\n', '4', '0', '0', null, '2014-05-31 00:54:15', '3');
INSERT INTO `post` VALUES ('2', '1', '关于子类与父类数据传递的问题', '<p><span style=\"font-size:16px\"><span style=\"background-color:rgb(242, 248, 239); color:rgb(0, 0, 0); font-family:helvetica,tahoma,arial,sans-serif\">我遇到一个问题：假设father是父类，sun是子类，sun继承自father，假设sun里面有个属性暂定为name而这个属性father类里面没有，当我在后台把取到的List&lt;sun&gt;传到List&lt;father&gt;里面之后，再传到extjs前台，在前台能够取到name属性的值，这是怎么回事啊？？求解答啊，谢谢！</span></span></p>\r\n', '0', '0', '0', '已解决', '2014-05-31 11:30:57', '5');
INSERT INTO `post` VALUES ('3', '1', '【jdbcTemplate】批量插入异常捕获', '<p><span style=\"font-size:16px\"><span style=\"background-color:rgb(242, 248, 239); color:rgb(0, 0, 0); font-family:helvetica,tahoma,arial,sans-serif\">在使用jdbctemplate的批量操作的时候&nbsp;</span><br />\r\n<br />\r\n<span style=\"background-color:rgb(242, 248, 239); color:rgb(0, 0, 0); font-family:helvetica,tahoma,arial,sans-serif\">调用jdbcTemplate.batchUpdate，他的原理机制是，集合一定数量的sql，一起发送到数据库，这样减少与数据库频繁交互的成本&nbsp;</span><br />\r\n<span style=\"background-color:rgb(242, 248, 239); color:rgb(0, 0, 0); font-family:helvetica,tahoma,arial,sans-serif\">但现在有一个问题就是，我这有50条sql，批量插入，然后有一条有问题，我如何让这一条执行失败时，不影响其余49条语句的执行呢？&nbsp;</span><br />\r\n<br />\r\n<span style=\"background-color:rgb(242, 248, 239); color:rgb(0, 0, 0); font-family:helvetica,tahoma,arial,sans-serif\">下面是我自己封装的一个方法&nbsp;</span><br />\r\n<span style=\"background-color:rgb(242, 248, 239); color:rgb(0, 0, 0); font-family:helvetica,tahoma,arial,sans-serif\">批量插入这个list到数据库去，如果出现什么值太大，违反唯一性约束什么之类的异常，我的那个catch根本就捕获不住，我最多只能知道这个list插入有问题，没法实现list中一条记录有问题，不影响其他记录的执行&nbsp;</span></span></p>\r\n\r\n<pre class=\"brush:java;\">\r\npublic  void insert(final List&lt;?&gt; lists) {  \r\n    // 获取insert语句  eg：sql = insert into user (id,name,age) values (?,?,?)  \r\n    String sql = SqlUtils.getInsertSql(lists.get(0));  \r\n    jdbcTemplate.batchUpdate(sql, new BatchPreparedStatementSetter() {  \r\n        @Override  \r\n        public void setValues(PreparedStatement ps, int i) {  \r\n            Object value = lists.get(i);  \r\n            // objects = 获取代替？的具体值  \r\n            Object[] objects = SqlUtils.getValues(value);  \r\n            for (int k = 0; k &lt; objects.length; k++) {  \r\n                try {  \r\n                    ps.setObject(k + 1, objects[k]);  \r\n                } catch (SQLException e) {    \r\n                    log.error(&quot;数据库异常 -- &quot;+value.getClass().getSimpleName(),e);  \r\n                }  \r\n            }  \r\n        }  \r\n  \r\n        @Override  \r\n        public int getBatchSize() {  \r\n            return lists.size();  \r\n        }  \r\n    });  \r\n} </pre>\r\n\r\n<p>&nbsp;</p>\r\n', '1', '0', '0', '已解决', '2014-05-31 11:34:19', '10');
INSERT INTO `post` VALUES ('4', '1', 'mybatis ResultSet结果集错误', '<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:16px\"><span style=\"background-color:rgb(242, 248, 239); color:rgb(0, 0, 0); font-family:helvetica,tahoma,arial,sans-serif\">项目用了springmvc+mybatis&nbsp;</span><br />\r\n<span style=\"background-color:rgb(242, 248, 239); color:rgb(0, 0, 0); font-family:helvetica,tahoma,arial,sans-serif\">日志输出为logback,可是每当打印select count(*) from 表 这种sql语句的sql时候，显示的日志有问题，如下：&nbsp;</span><br />\r\n<span style=\"background-color:rgb(242, 248, 239); color:rgb(0, 0, 0); font-family:helvetica,tahoma,arial,sans-serif\">logback.xml中&nbsp;</span></span></p>\r\n\r\n<pre class=\"brush:xml;\">\r\n&lt;logger  name=&quot;org.apache.ibatis&quot; level=&quot;info&quot; /&gt;   \r\n    &lt;logger  name=&quot;java.sql.Connection&quot; level=&quot;debug&quot; /&gt;   \r\n    &lt;logger  name=&quot;java.sql.Statement&quot; level=&quot;debug&quot; /&gt;   \r\n    &lt;logger  name=&quot;java.sql.PreparedStatement&quot; level=&quot;debug&quot; /&gt;   \r\n    &lt;!-- &lt;logger name=&quot;java.sql.ResultSet&quot; level=&quot;debug&quot; /&gt;  --&gt;这里开启错误也是一样</pre>\r\n\r\n<p><span style=\"font-size:16px\"><span style=\"background-color:rgb(242, 248, 239); color:rgb(0, 0, 0); font-family:helvetica,tahoma,arial,sans-serif\">打印的日志（部分）：&nbsp;</span></span></p>\r\n\r\n<pre class=\"brush:java;\">\r\n[finance]2014-05-30 13:25:21,979 DEBUG com.company.finance.dao.UserMapper.getCounts [BaseJdbcLogger.java:132] ooo Using Connection [25027515(com.mysql.jdbc.JDBC4Connection@24cfe4)]  \r\n[finance]2014-05-30 13:25:21,980 DEBUG com.company.finance.dao.UserMapper.getCounts [BaseJdbcLogger.java:132] ==&gt;  Preparing: select count(*) from pub_user   \r\n[finance]2014-05-30 13:25:21,981 DEBUG com.company.finance.dao.UserMapper.getCounts [BaseJdbcLogger.java:132] ==&gt; Parameters:   \r\n[finance]2014-05-30 13:25:21,983 DEBUG com.company.finance.dao.UserMapper.getCounts [BaseJdbcLogger.java:132] &lt;==      Total: 1//下面的一处分页显示都是正常的，3条数据，但是这里打印的信息始终只有1，select count(*) from pub_user结果是3才对  \r\n[finance]2014-05-30 13:25:21,985 DEBUG com.company.finance.dao.UserMapper.findAll [BaseJdbcLogger.java:132] ooo Using Connection [25027515(com.mysql.jdbc.JDBC4Connection@24cfe4)]  \r\n[finance]2014-05-30 13:25:21,986 DEBUG com.company.finance.dao.UserMapper.findAll [BaseJdbcLogger.java:132] ==&gt;  Preparing: select * from pub_user limit 5   \r\n[finance]2014-05-30 13:25:21,987 DEBUG com.company.finance.dao.UserMapper.findAll [BaseJdbcLogger.java:132] ==&gt; Parameters:   \r\n[finance]2014-05-30 13:25:21,989 DEBUG com.company.finance.dao.UserMapper.findAll [BaseJdbcLogger.java:132] &lt;==      Total: 3//1.这里都是正确的，显示的3条</pre>\r\n\r\n<p><span style=\"font-size:16px\"><span style=\"background-color:rgb(242, 248, 239); color:rgb(0, 0, 0); font-family:helvetica,tahoma,arial,sans-serif\">debug查看返回的数量&nbsp;</span><br />\r\n<span style=\"background-color:rgb(242, 248, 239); color:rgb(0, 0, 0); font-family:helvetica,tahoma,arial,sans-serif\">int totalCount = baseMapper.getCounts(paramMap);//这里都是3&nbsp;</span><br />\r\n<span style=\"background-color:rgb(242, 248, 239); color:rgb(0, 0, 0); font-family:helvetica,tahoma,arial,sans-serif\">这是怎么回事，是logback没有配置正确还是哪里出问题了</span></span></p>\r\n', '2', '0', '0', '已解决', '2014-05-31 11:37:37', '0');
INSERT INTO `post` VALUES ('5', '1', 'java web 调用本地应用程序 有这方面的资料嘛?', '<p><span style=\"font-size:16px\"><span style=\"background-color:rgb(242, 248, 239); color:rgb(0, 0, 0); font-family:helvetica,tahoma,arial,sans-serif\">java web 调用本地应用程序 有这方面的资料嘛?</span></span></p>\r\n', '0', '0', '0', null, '2014-05-31 11:39:01', '5');
INSERT INTO `post` VALUES ('6', '1', '为什么eclipse怎么从svn检出项目没有.classpath', '<p><span style=\"font-size:16px\"><span style=\"background-color:rgb(242, 248, 239); color:rgb(0, 0, 0); font-family:helvetica,tahoma,arial,sans-serif\">eclipse怎么从svn检出项目的正确步骤是什么（请详细）</span></span></p>\r\n', '0', '0', '0', '已解决', '2014-05-31 12:24:45', '5');
INSERT INTO `post` VALUES ('7', '1', 'jsp批量提交 怎么验证input空', '<p><span style=\"font-size:16px\"><span style=\"background-color:rgb(242, 248, 239); color:rgb(0, 0, 0); font-family:helvetica,tahoma,arial,sans-serif\">怎么验证这些input是否空啊&nbsp;</span><br />\r\n<span style=\"background-color:rgb(242, 248, 239); color:rgb(0, 0, 0); font-family:helvetica,tahoma,arial,sans-serif\">&lt;input id=&quot;numid&quot; name=&quot;appList[0].number&quot; type=&quot;text&quot; maxlength=&quot;2&quot;&gt;&nbsp;</span><br />\r\n<span style=\"background-color:rgb(242, 248, 239); color:rgb(0, 0, 0); font-family:helvetica,tahoma,arial,sans-serif\">&lt;input id=&quot;numid&quot; name=&quot;appList[1].number&quot; type=&quot;text&quot; maxlength=&quot;2&quot;&gt;&nbsp;</span><br />\r\n<span style=\"background-color:rgb(242, 248, 239); color:rgb(0, 0, 0); font-family:helvetica,tahoma,arial,sans-serif\">&lt;input id=&quot;numid&quot; name=&quot;appList[i].number&quot; type=&quot;text&quot; maxlength=&quot;2&quot;&gt;&nbsp;</span><br />\r\n<span style=\"background-color:rgb(242, 248, 239); color:rgb(0, 0, 0); font-family:helvetica,tahoma,arial,sans-serif\">现在是在后台做的验证&nbsp;</span><br />\r\n<span style=\"background-color:rgb(242, 248, 239); color:rgb(0, 0, 0); font-family:helvetica,tahoma,arial,sans-serif\">但是我想在js验证&nbsp;</span><br />\r\n<span style=\"background-color:rgb(242, 248, 239); color:rgb(0, 0, 0); font-family:helvetica,tahoma,arial,sans-serif\">有什么好办法吗&nbsp; 求教...&nbsp;</span><br />\r\n<br />\r\n<br />\r\n<span style=\"background-color:rgb(242, 248, 239); color:rgb(0, 0, 0); font-family:helvetica,tahoma,arial,sans-serif\">另外请教ajaxsubmit怎么用啊&nbsp;</span></span><br />\r\n<span style=\"background-color:rgb(242, 248, 239); color:rgb(0, 0, 0); font-family:helvetica,tahoma,arial,sans-serif; font-size:14px\"><span style=\"font-size:16px\">可能我查的不对,百度找的ajaxsubmit代码,都不能用</span></span></p>\r\n', '1', '0', '0', null, '2014-05-31 13:23:24', '5');
INSERT INTO `post` VALUES ('8', '1', '请问大家有没有好用的jsp空间', '<p><span style=\"font-size:16px\"><span style=\"background-color:rgb(242, 248, 239); color:rgb(0, 0, 0); font-family:helvetica,tahoma,arial,sans-serif\">请问大家有没有好用的jsp空间，给推荐个吧。&nbsp;</span><br />\r\n<span style=\"background-color:rgb(242, 248, 239); color:rgb(0, 0, 0); font-family:helvetica,tahoma,arial,sans-serif\">价钱不是问题，只要稳定，诚信。&nbsp;</span><br />\r\n<span style=\"background-color:rgb(242, 248, 239); color:rgb(0, 0, 0); font-family:helvetica,tahoma,arial,sans-serif\">别是骗子公司。&nbsp;</span><br />\r\n<span style=\"background-color:rgb(242, 248, 239); color:rgb(0, 0, 0); font-family:helvetica,tahoma,arial,sans-serif\">谢谢</span></span></p>\r\n', '1', '0', '0', null, '2014-05-31 13:36:46', '5');
INSERT INTO `post` VALUES ('9', '1', '网络抓包（HTTP包）在32位和64位操作系统上，格式是不是不一样？', '<p><span style=\"color:rgb(0, 0, 0); font-family:helvetica,tahoma,arial,sans-serif; font-size:14px\"><span style=\"background-color:#FFFFFF\">访问同样的URL，32位和64位操作系统上，抓的包不一样。&nbsp;</span></span><br />\r\n<span style=\"color:rgb(0, 0, 0); font-family:helvetica,tahoma,arial,sans-serif; font-size:14px\"><span style=\"background-color:#FFFFFF\">包头的长度不相同&nbsp;</span></span><br />\r\n<br />\r\n<br />\r\n<span style=\"color:rgb(0, 0, 0); font-family:helvetica,tahoma,arial,sans-serif; font-size:14px\"><span style=\"background-color:#FFFFFF\">谁了解这一块，能否详解一下，或者发一下相关资料链接，本人暂时没有找到这个解释，谢谢！</span></span></p>\r\n', '1', '0', '0', null, '2014-06-01 11:17:12', '0');
INSERT INTO `post` VALUES ('10', '3', 'spring mvc 之ModelAndView问题', '<pre class=\"brush:java;\">\r\n@RequestMapping(value=&quot;/login&quot;) \r\npublic ModelAndView operator(Model model){ \r\nmodel.addAttribute(&quot;&quot;,&quot;&quot;);//添加模型数据 \r\nModelAndView mv=new ModelAndView(&quot;success&quot;); \r\nmv.addObject(&quot;&quot;,&quot;&quot;);//在视图渲染之前更新模型数据 \r\nmodel.addAttribute(&quot;&quot;, &quot;&quot;); \r\nreturn mv; \r\n} </pre>\r\n\r\n<p><span style=\"color:rgb(0, 0, 0); font-family:helvetica,tahoma,arial,sans-serif; font-size:14px\"><span style=\"background-color:#FFFFFF\">看到别人是这么写的， ModelAndView mv=new ModelAndView(&quot;success&quot;);这句中的success是怎么来的，什么意思？不知道这个是不是ModelAndView默认的，&nbsp;</span></span><br />\r\n<span style=\"color:rgb(0, 0, 0); font-family:helvetica,tahoma,arial,sans-serif; font-size:14px\"><span style=\"background-color:#FFFFFF\">还有一点不明白的是返回的仅仅是mv,为什么还要model.addAttribute(),到底什么意思呢求解!本人初学，实在不懂</span></span></p>\r\n', '0', '0', '0', null, '2014-06-01 11:19:39', '3');
INSERT INTO `post` VALUES ('11', '3', 'Spring声明式事务，隔离级别设置Oracle不支持的隔离级别，会有什么结果', '<p><span style=\"background-color:rgb(242, 248, 239); color:rgb(0, 0, 0); font-family:helvetica,tahoma,arial,sans-serif; font-size:14px\">Oracle只支持READ COMMITTED 和 SERIALIZABLE这两种事务隔离级别，而如果我在一个方法上将隔离级别设为READ UNCOMMITTED 或REPEATABLE READ，会有什么样的结果？抛出异常？隔离级别不生效？求解释。</span></p>\r\n', '0', '0', '0', null, '2014-06-01 11:21:18', '5');
INSERT INTO `post` VALUES ('12', '3', '请问这个表结构如何设计？', '<p><span style=\"background-color:rgb(242, 248, 239); color:rgb(0, 0, 0); font-family:helvetica,tahoma,arial,sans-serif; font-size:14px\">现在有一张表table1，字段A1，A2，A3....An；用另一张表table2存放用户对table1所关心的字段名称，比如U1用户关心A1、A3字段，U2用户关心A2、A4字段，这个表table2该怎么设计呢？现在的方式感觉很弱，如果修改起来很不方便：&nbsp;</span><br />\r\n<span style=\"background-color:rgb(242, 248, 239); color:rgb(0, 0, 0); font-family:helvetica,tahoma,arial,sans-serif; font-size:14px\">varchar(n) varchar(n)&nbsp;</span><br />\r\n<span style=\"background-color:rgb(242, 248, 239); color:rgb(0, 0, 0); font-family:helvetica,tahoma,arial,sans-serif; font-size:14px\">U1 table1.A1,table1.A3&nbsp;</span><br />\r\n<span style=\"background-color:rgb(242, 248, 239); color:rgb(0, 0, 0); font-family:helvetica,tahoma,arial,sans-serif; font-size:14px\">U2 table1.A2,table1.A4&nbsp;</span><br />\r\n<span style=\"background-color:rgb(242, 248, 239); color:rgb(0, 0, 0); font-family:helvetica,tahoma,arial,sans-serif; font-size:14px\">求指教。或者是改用视图而不是用表？</span></p>\r\n', '1', '0', '0', null, '2014-06-01 11:23:44', '5');
INSERT INTO `post` VALUES ('13', '3', 'java项目部署到tomcat6正常，移到jboss5无法访问', '<p><span style=\"background-color:rgb(242, 248, 239); color:rgb(0, 0, 0); font-family:helvetica,tahoma,arial,sans-serif; font-size:14px\">java项目用的是struts2-core-2.1.8.1.jar + struts2-convention-plugin-2.1.8.1.jar，注解的方式开发的。在tomcat下正常，移到jboss5action却无法访问。&nbsp;</span><br />\r\n<br />\r\n<span style=\"background-color:rgb(242, 248, 239); color:rgb(0, 0, 0); font-family:helvetica,tahoma,arial,sans-serif; font-size:14px\">相关代码如下：&nbsp;</span><br />\r\n<br />\r\n<span style=\"background-color:rgb(242, 248, 239); color:rgb(0, 0, 0); font-family:helvetica,tahoma,arial,sans-serif; font-size:14px\">struts.xml&nbsp;</span></p>\r\n\r\n<pre class=\"brush:xml;\">\r\n&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;  \r\n&lt;!DOCTYPE struts PUBLIC  \r\n        &quot;-//Apache Software Foundation//DTD Struts Configuration 2.0//EN&quot;  \r\n        &quot;http://struts.apache.org/dtds/struts-2.0.dtd&quot;&gt;  \r\n&lt;struts&gt;  \r\n      \r\n    &lt;constant name=&quot;struts.convention.result.path&quot; value=&quot;/&quot; /&gt;  \r\n    &lt;constant name=&quot;struts.convention.package.locators&quot; value=&quot;actions&quot;/&gt;   \r\n      \r\n&lt;/struts&gt;</pre>\r\n\r\n<p><span style=\"background-color:rgb(242, 248, 239); color:rgb(0, 0, 0); font-family:helvetica,tahoma,arial,sans-serif; font-size:14px\">TestAction.java&nbsp;</span></p>\r\n\r\n<pre class=\"brush:java;\">\r\npackage com.web.actions;  \r\n  \r\nimport org.apache.struts2.convention.annotation.Action;  \r\nimport org.apache.struts2.convention.annotation.Namespace;  \r\n  \r\n@Namespace(&quot;/ddd&quot;)  \r\npublic class TestAction {  \r\n      \r\n    @Action(&quot;index&quot;)  \r\n    public String index(){  \r\n        try {  \r\n            System.out.println(&quot;abc&quot;);  \r\n              \r\n        } catch (Exception e) {  \r\n            e.printStackTrace();  \r\n        }  \r\n        return null;  \r\n    }  \r\n      \r\n      \r\n} </pre>\r\n\r\n<p><span style=\"background-color:rgb(242, 248, 239); color:rgb(0, 0, 0); font-family:helvetica,tahoma,arial,sans-serif; font-size:14px\">jboss接触很少，不知道什么原因，项目已经添加到付件&nbsp;</span><br />\r\n<br />\r\n<span style=\"background-color:rgb(242, 248, 239); color:rgb(0, 0, 0); font-family:helvetica,tahoma,arial,sans-serif; font-size:14px\">指教一下，不甚感激！&nbsp;</span></p>\r\n', '1', '0', '0', null, '2014-06-01 11:25:56', '5');
INSERT INTO `post` VALUES ('14', '4', 'jsp批量提交 怎么验证input空', '<p><span style=\"background-color:rgb(242, 248, 239); color:rgb(0, 0, 0); font-family:helvetica,tahoma,arial,sans-serif; font-size:14px\">java项目用的是struts2-core-2.1.8.1.jar + struts2-convention-plugin-2.1.8.1.jar，注解的方式开发的。在tomcat下正常，移到jboss5action却无法访问。&nbsp;</span><br />\r\n<br />\r\n<span style=\"background-color:rgb(242, 248, 239); color:rgb(0, 0, 0); font-family:helvetica,tahoma,arial,sans-serif; font-size:14px\">相关代码如下：&nbsp;</span><br />\r\n&nbsp;</p>\r\n\r\n<pre class=\"brush:java;\">\r\n&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt; \r\n\r\n&lt;!DOCTYPE struts PUBLIC \r\n03\r\n        &quot;-//Apache Software Foundation//DTD Struts Configuration 2.0//EN&quot; \r\n04\r\n        &quot;http://struts.apache.org/dtds/struts-2.0.dtd&quot;&gt; \r\n05\r\n&lt;struts&gt; \r\n06\r\n       \r\n07\r\n    &lt;constant name=&quot;struts.convention.result.path&quot; value=&quot;/&quot; /&gt; \r\n08\r\n    &lt;constant name=&quot;struts.convention.package.locators&quot; value=&quot;actions&quot;/&gt;  \r\n09\r\n       \r\n10\r\n&lt;/struts&gt;\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n', '0', '0', '0', null, '2014-06-04 16:51:05', '3');
INSERT INTO `post` VALUES ('15', '4', '的萨芬', '<p>二万人</p>\r\n\r\n<pre class=\"brush:java;\">\r\n//固定线程数 -- FixedThreadPool \r\n02\r\npublic static ExecutorService newFixedThreadPool(int nThreads) { \r\n03\r\n    return new ThreadPoolExecutor(nThreads, nThreads, 0L, TimeUnit.MILLISECONDS, \r\n04\r\n            new LinkedBlockingQueue&lt;Runnable&gt;()); \r\n05\r\n} \r\n06\r\n   \r\n07\r\n//单条线程  --  SingleThreadExecutor \r\n08\r\npublic static ExecutorService newSingleThreadExecutor() { \r\n09\r\n    return new FinalizableDelegatedExecutorService(new ThreadPoolExecutor(1, 1, 0L, \r\n10\r\n            TimeUnit.MILLISECONDS, new LinkedBlockingQueue&lt;Runnable&gt;())); \r\n11\r\n} \r\n12\r\n   \r\n13\r\n//线程数自增长    --  CachedThreadPool \r\n14\r\npublic static ExecutorService newCachedThreadPool() { \r\n15\r\n    return new ThreadPoolExecutor(0, Integer.MAX_VALUE, 60L, TimeUnit.SECONDS, \r\n16\r\n            new SynchronousQueue&lt;Runnable&gt;()); \r\n17\r\n}\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n', '1', '0', '0', null, '2014-06-04 16:59:57', '2');
INSERT INTO `post` VALUES ('16', '1', 'jsp批量提交 怎么验证input空', '<p>阿萨德发射点发岁的法撒旦法</p>\r\n', '0', '0', '0', null, '2014-06-04 17:09:39', '6');

-- ----------------------------
-- Table structure for `reply`
-- ----------------------------
DROP TABLE IF EXISTS `reply`;
CREATE TABLE `reply` (
  `replyId` int(11) NOT NULL AUTO_INCREMENT,
  `postId` int(11) DEFAULT NULL,
  `userId` int(11) DEFAULT NULL,
  `replyInfo` text,
  `replyTime` datetime DEFAULT NULL,
  PRIMARY KEY (`replyId`),
  KEY `FK_Relationship_10` (`postId`),
  KEY `FK_Relationship_11` (`userId`),
  CONSTRAINT `FK_Relationship_10` FOREIGN KEY (`postId`) REFERENCES `post` (`postId`),
  CONSTRAINT `FK_Relationship_11` FOREIGN KEY (`userId`) REFERENCES `user` (`userId`)
) ENGINE=InnoDB AUTO_INCREMENT=14 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of reply
-- ----------------------------
INSERT INTO `reply` VALUES ('1', '1', '1', '<p><span style=\"color:rgb(0, 0, 0); font-family:helvetica,tahoma,arial,sans-serif; font-size:14px\">不晓得你到底要做什么，&nbsp;</span><br />\r\n<span style=\"color:rgb(0, 0, 0); font-family:helvetica,tahoma,arial,sans-serif; font-size:14px\">simpledateformat sdf=new SimpleDateFormat(&#39;yyyy-MM-dd hh:mm:ss&#39;)&nbsp;</span><br />\r\n<span style=\"color:rgb(0, 0, 0); font-family:helvetica,tahoma,arial,sans-serif; font-size:14px\">sdf.format();&nbsp;</span><br />\r\n<span style=\"color:rgb(0, 0, 0); font-family:helvetica,tahoma,arial,sans-serif; font-size:14px\">sdf.parse();&nbsp;</span><br />\r\n<span style=\"color:rgb(0, 0, 0); font-family:helvetica,tahoma,arial,sans-serif; font-size:14px\">自己转换</span></p>\r\n', '2014-05-31 17:06:25');
INSERT INTO `reply` VALUES ('2', '1', '2', '<p><span style=\"color:rgb(0, 0, 0); font-family:helvetica,tahoma,arial,sans-serif; font-size:14px\">要么后台格式化后，再返回JSON数据；要么后台不处理，前端对数据格式化</span></p>\r\n', '2014-05-31 17:07:58');
INSERT INTO `reply` VALUES ('3', '8', '1', '<p><span style=\"color:rgb(0, 0, 0); font-family:helvetica,tahoma,arial,sans-serif; font-size:14px\">http://www.jspkongjian.net/&nbsp;</span><br />\r\n<span style=\"color:rgb(0, 0, 0); font-family:helvetica,tahoma,arial,sans-serif; font-size:14px\">用了几年了 从来没挂过</span></p>\r\n', '2014-05-31 21:04:00');
INSERT INTO `reply` VALUES ('4', '1', '3', '<p><span style=\"color:rgb(0, 0, 0); font-family:helvetica,tahoma,arial,sans-serif; font-size:14px\">objectMapper.getSerializationConfig().setDateFormat(myDateFormat);&nbsp;&nbsp;</span><br />\r\n<span style=\"color:rgb(0, 0, 0); font-family:helvetica,tahoma,arial,sans-serif; font-size:14px\">http://godfox.iteye.com/blog/658427</span></p>\r\n', '2014-06-01 11:03:35');
INSERT INTO `reply` VALUES ('5', '4', '4', '<p><span style=\"background-color:rgb(251, 237, 237); color:rgb(0, 0, 0); font-family:helvetica,tahoma,arial,sans-serif; font-size:14px\">你select count(*)返回的是什么？是一个数字！也就是一条记录！&nbsp;</span><br />\r\n<span style=\"background-color:rgb(251, 237, 237); color:rgb(0, 0, 0); font-family:helvetica,tahoma,arial,sans-serif; font-size:14px\">total表示的就是返回的结果数量！就是1&nbsp;</span><br />\r\n<span style=\"background-color:rgb(251, 237, 237); color:rgb(0, 0, 0); font-family:helvetica,tahoma,arial,sans-serif; font-size:14px\">你select *返回的是什么？是三条记录！total当然是3了</span></p>\r\n', '2014-06-01 11:06:57');
INSERT INTO `reply` VALUES ('6', '3', '5', '<p><span style=\"color:rgb(0, 0, 0); font-family:helvetica,tahoma,arial,sans-serif; font-size:14px\">批量么，肯定是要么全commit，要么全rollback。&nbsp;</span><br />\r\n<span style=\"color:rgb(0, 0, 0); font-family:helvetica,tahoma,arial,sans-serif; font-size:14px\">你既然用了batchUpdate,batchInsert,那你肯定得确保你的批量sql都没有问题。&nbsp;</span><br />\r\n<span style=\"color:rgb(0, 0, 0); font-family:helvetica,tahoma,arial,sans-serif; font-size:14px\">神马主键约束啊，你设计的数据库不会考虑到这些问题么，如果不用主键自增长，那你页面表单就得ajax判断数据库是不是已经存在了！&nbsp;</span><br />\r\n<span style=\"color:rgb(0, 0, 0); font-family:helvetica,tahoma,arial,sans-serif; font-size:14px\">长度神马的都是客户端上该处理的问题，你这些验证控制自己不做好，数据库再牛板也帮不了你啊</span></p>\r\n', '2014-06-01 11:14:09');
INSERT INTO `reply` VALUES ('7', '4', '1', '<p><span style=\"color:rgb(0, 0, 0); font-family:helvetica,tahoma,arial,sans-serif; font-size:14px\"><span style=\"background-color:#FFFFFF\">如果想批量，就要一起commit，一起回滚事物，&nbsp;</span></span><br />\r\n<span style=\"color:rgb(0, 0, 0); font-family:helvetica,tahoma,arial,sans-serif; font-size:14px\"><span style=\"background-color:#FFFFFF\">否则如果你想记录记录哪条数据有问题，&nbsp;</span></span><br />\r\n<span style=\"color:rgb(0, 0, 0); font-family:helvetica,tahoma,arial,sans-serif; font-size:14px\"><span style=\"background-color:#FFFFFF\">那就不要批量，一条一条提交，&nbsp;</span></span><br />\r\n<span style=\"color:rgb(0, 0, 0); font-family:helvetica,tahoma,arial,sans-serif; font-size:14px\"><span style=\"background-color:#FFFFFF\">碰到有问题的trycatch去捕获他，&nbsp;</span></span><br />\r\n<span style=\"color:rgb(0, 0, 0); font-family:helvetica,tahoma,arial,sans-serif; font-size:14px\"><span style=\"background-color:#FFFFFF\">定义一个字符串记录一下，然后再继续提交，&nbsp;</span></span><br />\r\n<span style=\"color:rgb(0, 0, 0); font-family:helvetica,tahoma,arial,sans-serif; font-size:14px\"><span style=\"background-color:#FFFFFF\">如果再次碰到有问题的，然后在追加字符串，&nbsp;</span></span><br />\r\n<span style=\"color:rgb(0, 0, 0); font-family:helvetica,tahoma,arial,sans-serif; font-size:14px\"><span style=\"background-color:#FFFFFF\">最终返回字符串，&nbsp;</span></span><br />\r\n<span style=\"color:rgb(0, 0, 0); font-family:helvetica,tahoma,arial,sans-serif; font-size:14px\"><span style=\"background-color:#FFFFFF\">如果是空的，代表全部成功，&nbsp;</span></span><br />\r\n<span style=\"color:rgb(0, 0, 0); font-family:helvetica,tahoma,arial,sans-serif; font-size:14px\"><span style=\"background-color:#FFFFFF\">否则就查询字符串里面记录的信息，就知道哪条失败了</span></span></p>\r\n', '2014-06-01 11:15:52');
INSERT INTO `reply` VALUES ('8', '1', '1', '<p><span style=\"background-color:rgb(251, 237, 237); color:rgb(0, 0, 0); font-family:helvetica,tahoma,arial,sans-serif; font-size:14px\">区分的意思是：你想知道当前是带时间还是不带时间&nbsp;</span><br />\r\n<span style=\"background-color:rgb(251, 237, 237); color:rgb(0, 0, 0); font-family:helvetica,tahoma,arial,sans-serif; font-size:14px\">如果是这样的话，你把他转成字符串，判断他的长度不就可以了，大于11的就是带时间的啊，否则就是不带时间的&nbsp;</span></p>\r\n', '2014-06-01 13:30:04');
INSERT INTO `reply` VALUES ('10', '7', '4', '<p>阿萨德发射点发岁的噶第三个斯蒂芬</p>\r\n', '2014-06-04 16:51:57');
INSERT INTO `reply` VALUES ('11', '9', '4', '<p>估算的定位我大 的伟大</p>\r\n', '2014-06-04 16:58:49');
INSERT INTO `reply` VALUES ('12', '15', '4', '<pre class=\"brush:java;\">\r\n//固定线程数 -- FixedThreadPool \r\n02\r\npublic static ExecutorService newFixedThreadPool(int nThreads) { \r\n03\r\n    return new ThreadPoolExecutor(nThreads, nThreads, 0L, TimeUnit.MILLISECONDS, \r\n04\r\n            new LinkedBlockingQueue&lt;Runnable&gt;()); \r\n05\r\n} \r\n06\r\n   \r\n07\r\n//单条线程  --  SingleThreadExecutor \r\n08\r\npublic static ExecutorService newSingleThreadExecutor() { \r\n09\r\n    return new FinalizableDelegatedExecutorService(new ThreadPoolExecutor(1, 1, 0L, \r\n10\r\n            TimeUnit.MILLISECONDS, new LinkedBlockingQueue&lt;Runnable&gt;())); \r\n11\r\n} \r\n12\r\n   \r\n13\r\n//线程数自增长    --  CachedThreadPool \r\n14\r\npublic static ExecutorService newCachedThreadPool() { \r\n15\r\n    return new ThreadPoolExecutor(0, Integer.MAX_VALUE, 60L, TimeUnit.SECONDS, \r\n16\r\n            new SynchronousQueue&lt;Runnable&gt;()); \r\n17\r\n}\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n', '2014-06-04 17:01:37');
INSERT INTO `reply` VALUES ('13', '12', '1', '<p>阿萨德发射点发岁的法撒旦法阿斯蒂芬</p>\r\n', '2014-06-04 17:09:15');

-- ----------------------------
-- Table structure for `resource`
-- ----------------------------
DROP TABLE IF EXISTS `resource`;
CREATE TABLE `resource` (
  `resourceID` int(11) NOT NULL AUTO_INCREMENT,
  `userId` int(11) DEFAULT NULL,
  `resourceName` varchar(255) DEFAULT NULL,
  `resourceType` varchar(50) DEFAULT NULL,
  `resourcePath` varchar(1024) DEFAULT NULL,
  `itBean` int(11) DEFAULT NULL,
  `downloadNum` int(50) DEFAULT NULL,
  `downloadScore` int(50) DEFAULT NULL,
  `uploadTime` datetime DEFAULT NULL,
  PRIMARY KEY (`resourceID`),
  KEY `FK_Relationship_12` (`userId`),
  CONSTRAINT `FK_Relationship_12` FOREIGN KEY (`userId`) REFERENCES `user` (`userId`)
) ENGINE=InnoDB AUTO_INCREMENT=9 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of resource
-- ----------------------------
INSERT INTO `resource` VALUES ('1', '1', 'java web', '编程语言', 'b2eb3626-75c5-434b-b792-5819eed3aa44java.png', '5', '0', '100', '2014-06-02 23:47:37');
INSERT INTO `resource` VALUES ('2', '1', 'IT_BBS文档', '非技术', '17028b5f-5a8c-4677-abc9-2c636e1cff72IT_BBS.docx', '3', '0', '100', '2014-06-03 00:07:28');
INSERT INTO `resource` VALUES ('3', '1', 'jquery', 'Web前端', 'cd4e0df8-20eb-4fea-b097-a2d3507abd10jquery-ui-1.10.4.custom.zip', '0', '0', '100', '2014-06-03 01:58:36');
INSERT INTO `resource` VALUES ('4', '1', 'jquery', 'Web前端', '7f1765ae-38d2-4f9a-a02b-c2322d655aa0jquery-2.1.1.min.js', '1', '0', '100', '2014-06-03 12:16:47');
INSERT INTO `resource` VALUES ('5', '1', 'jquery', 'Web前端', '40f53b06-d660-4a4f-a06c-5955f68cfeb7jquery.validate.min.js', '1', '0', '100', '2014-06-03 12:25:55');
INSERT INTO `resource` VALUES ('6', '1', 'java仿2048游戏实例源码', '编程语言', 'ecc30530-9df4-4155-a8d1-e7a6d34e4c2fEclipse ，MyEclipse 的代码提示功能（图文教程）V1.1.doc', '2', '0', '100', '2014-06-04 16:01:57');
INSERT INTO `resource` VALUES ('7', '1', 'IT_BBS文档', 'Web前端', '200d231e-1831-4cef-8088-5fdc6ec586b1IT_BBS.docx', '1', '0', '100', '2014-06-04 16:42:20');
INSERT INTO `resource` VALUES ('8', '1', 'java web', '互联网', '64d590ef-5ee0-4eb2-8723-4e3f81f69239Eclipse ，MyEclipse 的代码提示功能（图文教程）V1.1.doc', '4', '0', '100', '2014-06-04 17:08:44');

-- ----------------------------
-- Table structure for `score`
-- ----------------------------
DROP TABLE IF EXISTS `score`;
CREATE TABLE `score` (
  `scoreId` int(11) NOT NULL AUTO_INCREMENT,
  `userId` int(11) DEFAULT NULL,
  `changeContent` varchar(20) DEFAULT NULL,
  `ITbeanChange` varchar(20) DEFAULT NULL,
  `scoreChange` varchar(20) DEFAULT NULL,
  `changeTime` datetime DEFAULT NULL,
  PRIMARY KEY (`scoreId`),
  KEY `FK_Relationship_15` (`userId`),
  CONSTRAINT `FK_Relationship_15` FOREIGN KEY (`userId`) REFERENCES `user` (`userId`)
) ENGINE=InnoDB AUTO_INCREMENT=23 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of score
-- ----------------------------
INSERT INTO `score` VALUES ('1', '4', '发表博客', '+2', '+100', '2014-06-02 12:30:56');
INSERT INTO `score` VALUES ('2', '4', '发表博客', '+2', '+100', '2014-06-02 12:36:07');
INSERT INTO `score` VALUES ('3', '1', '发表博客', '+2', '+100', '2014-06-02 13:01:37');
INSERT INTO `score` VALUES ('4', '1', '上传资料', '+4', '+200', '2014-06-03 12:16:47');
INSERT INTO `score` VALUES ('5', '1', '上传资料', '+4', '+200', '2014-06-03 12:25:55');
INSERT INTO `score` VALUES ('6', '21', '发表博客', '+2', '+100', '2014-06-03 20:43:11');
INSERT INTO `score` VALUES ('7', '5', '发表博客', '+2', '+100', '2014-06-03 20:56:37');
INSERT INTO `score` VALUES ('8', '1', '下载资料', '0', '+100', '2014-06-03 21:44:51');
INSERT INTO `score` VALUES ('9', '1', '下载资料', '-0', '+100', '2014-06-03 22:20:37');
INSERT INTO `score` VALUES ('10', '1', '下载资料', '-0', '+100', '2014-06-03 22:20:38');
INSERT INTO `score` VALUES ('11', '1', '下载资料', '-0', '+100', '2014-06-03 22:20:39');
INSERT INTO `score` VALUES ('12', '1', '下载资料', '-0', '+100', '2014-06-03 22:20:42');
INSERT INTO `score` VALUES ('13', '1', '下载资料', '-0', '+100', '2014-06-03 22:20:43');
INSERT INTO `score` VALUES ('14', '3', '下载资料', '-3', '+100', '2014-06-04 14:05:19');
INSERT INTO `score` VALUES ('15', '5', '发表博客', '+2', '+100', '2014-06-04 15:32:30');
INSERT INTO `score` VALUES ('16', '1', '上传资料', '+4', '+200', '2014-06-04 16:01:57');
INSERT INTO `score` VALUES ('17', '1', '上传资料', '+4', '+200', '2014-06-04 16:42:20');
INSERT INTO `score` VALUES ('18', '1', '下载资料', '-5', '+100', '2014-06-04 16:42:34');
INSERT INTO `score` VALUES ('19', '1', '发表博客', '+2', '+100', '2014-06-04 17:05:27');
INSERT INTO `score` VALUES ('20', '1', '下载资料', '-0', '+100', '2014-06-04 17:08:18');
INSERT INTO `score` VALUES ('21', '1', '上传资料', '+4', '+200', '2014-06-04 17:08:44');
INSERT INTO `score` VALUES ('22', '24', '下载资料', '-4', '+100', '2014-06-04 17:22:17');

-- ----------------------------
-- Table structure for `sort`
-- ----------------------------
DROP TABLE IF EXISTS `sort`;
CREATE TABLE `sort` (
  `sortId` int(11) NOT NULL AUTO_INCREMENT,
  `userId` int(11) DEFAULT NULL,
  `sortName` varchar(50) DEFAULT NULL,
  `articleNum` int(11) DEFAULT NULL,
  `createTime` datetime DEFAULT NULL,
  PRIMARY KEY (`sortId`),
  KEY `FK_Relationship_16` (`userId`),
  CONSTRAINT `FK_Relationship_16` FOREIGN KEY (`userId`) REFERENCES `user` (`userId`)
) ENGINE=InnoDB AUTO_INCREMENT=24 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of sort
-- ----------------------------
INSERT INTO `sort` VALUES ('9', '1', 'jsp', '-1', '2014-05-26 01:11:04');
INSERT INTO `sort` VALUES ('10', '1', 'js', '0', '2014-05-26 01:44:53');
INSERT INTO `sort` VALUES ('11', '1', 'java', '1', '2014-05-26 17:34:06');
INSERT INTO `sort` VALUES ('12', '2', 'HBase', '1', '2014-05-28 15:52:10');
INSERT INTO `sort` VALUES ('13', '2', 'API', '1', '2014-05-28 16:03:01');
INSERT INTO `sort` VALUES ('14', '3', 'android', '2', '2014-06-01 23:50:07');
INSERT INTO `sort` VALUES ('15', '4', '应用', '1', '2014-06-02 12:28:24');
INSERT INTO `sort` VALUES ('16', '4', 'DWR', '1', '2014-06-02 12:35:00');
INSERT INTO `sort` VALUES ('17', '1', '生活', '1', '2014-06-02 13:01:37');
INSERT INTO `sort` VALUES ('18', '21', 'GC', '1', '2014-06-03 20:43:11');
INSERT INTO `sort` VALUES ('19', '5', 'Nodes', '1', '2014-06-03 20:56:37');
INSERT INTO `sort` VALUES ('20', '5', 'java', '1', '2014-06-04 15:32:29');
INSERT INTO `sort` VALUES ('21', '4', 'javas', '0', '2014-06-04 16:54:51');
INSERT INTO `sort` VALUES ('22', '1', 'sssh', '1', '2014-06-04 17:05:27');
INSERT INTO `sort` VALUES ('23', '1', 'sssh\'sdf', '0', '2014-06-04 17:05:52');

-- ----------------------------
-- Table structure for `user`
-- ----------------------------
DROP TABLE IF EXISTS `user`;
CREATE TABLE `user` (
  `userId` int(11) NOT NULL AUTO_INCREMENT,
  `userName` varchar(50) NOT NULL,
  `password` varchar(50) NOT NULL,
  `userType` varchar(50) NOT NULL,
  `sex` varchar(10) DEFAULT NULL,
  `photo` varchar(255) DEFAULT NULL,
  `nickName` varchar(50) DEFAULT NULL,
  `address` varchar(50) DEFAULT NULL,
  `email` varchar(20) DEFAULT NULL,
  `rank` int(11) DEFAULT NULL,
  `score` int(11) DEFAULT NULL,
  `userReadNum` int(11) DEFAULT NULL,
  `ITbeanNum` int(11) DEFAULT NULL,
  `articleNumber` int(11) DEFAULT NULL,
  `messageNumber` int(11) DEFAULT NULL,
  `lastLoginTime` datetime DEFAULT NULL,
  `registerTime` datetime DEFAULT NULL,
  `signature` varchar(100) DEFAULT NULL,
  `birthday` date DEFAULT NULL,
  `qq` varchar(20) DEFAULT NULL,
  `hobby` varchar(200) DEFAULT NULL,
  `position` varchar(20) DEFAULT NULL,
  `industry` varchar(50) DEFAULT NULL,
  `workAge` varchar(50) DEFAULT NULL,
  `income` varchar(20) DEFAULT NULL,
  `introduction` varchar(200) DEFAULT NULL,
  `maritalStatus` varchar(20) DEFAULT NULL,
  PRIMARY KEY (`userId`)
) ENGINE=InnoDB AUTO_INCREMENT=25 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of user
-- ----------------------------
INSERT INTO `user` VALUES ('1', 'lys', '123456', '普通用户', '女', 'cca05cb8-2088-489e-863e-a7e3c8af3b17ask.png', '企鹅の世界', '茂名', '', '1', '4000', '0', '10', '2', '9', '2014-06-04 19:09:38', '2014-05-22 20:42:44', '大使馆法撒旦个', '2014-05-27', '', '阿斯蒂芬', '', '互联网', '一年以上', '无收入', '', null);
INSERT INTO `user` VALUES ('2', '冯金凤', '123456', '普通用户', '女', 'e1be31a4-88b0-4340-9f77-e62c2e413a32images.jpg', '金凤同学', '广州', '', '1', '1900', '0', '10', '2', '0', '2014-05-31 17:07:45', '2014-05-22 21:59:20', '', null, '', '', '', '', '', '无收入', '', null);
INSERT INTO `user` VALUES ('3', '邓光华', '123456', '普通用户', '男', 'a29fe4bc-3c3f-49ed-9299-5593b216f53b1_u012250252.jpg', '光华同学', null, '', '1', '1900', '0', '7', '2', '3', '2014-06-04 17:17:02', '2014-05-27 12:56:46', '', null, '', '', '', '', '在读学生', '无收入', '', null);
INSERT INTO `user` VALUES ('4', '余卓璇', '123456', '普通用户', '女', 'a687ba29-aeea-4604-91f6-20ca90e4d1d5images.jpg', '卓璇同学', null, '', '1', '1700', '0', '14', '2', '0', '2014-06-04 16:57:38', '2014-05-27 12:56:50', '', null, '', '', '', '', '', '无收入', '', null);
INSERT INTO `user` VALUES ('5', '龙威', '123456', '普通用户', '男', 'default.gif', '龙威同学', null, null, '1', '1800', '0', '14', '2', '0', '2014-06-04 16:49:18', '2014-05-27 12:56:54', null, null, null, null, null, null, null, null, null, null);
INSERT INTO `user` VALUES ('6', '101', '123456', '普通用户', '男', 'default.gif', null, null, null, '1', '1500', '0', '10', '0', '0', '2014-06-04 13:14:30', '2014-05-27 12:56:57', null, null, null, null, null, null, null, null, null, null);
INSERT INTO `user` VALUES ('7', '102', '123456', '普通用户', '男', 'default.gif', null, null, null, '1', '1400', '0', '10', '0', '0', null, '2014-05-27 12:57:00', null, null, null, null, null, null, null, null, null, null);
INSERT INTO `user` VALUES ('8', '103', '123456', '普通用户', '男', 'default.gif', null, null, null, '1', '1300', '0', '10', '0', '0', null, '2014-05-27 12:57:02', null, null, null, null, null, null, null, null, null, null);
INSERT INTO `user` VALUES ('9', '104', '123456', '普通用户', '男', 'default.gif', null, null, null, '1', '1200', '0', '10', '0', '0', null, '2014-05-27 12:57:04', null, null, null, null, null, null, null, null, null, null);
INSERT INTO `user` VALUES ('10', '105', '123456', '普通用户', '男', 'default.gif', null, null, null, '1', '1100', '0', '10', '0', '0', null, '2014-05-27 12:57:09', null, null, null, null, null, null, null, null, null, null);
INSERT INTO `user` VALUES ('11', '106', '123456', '普通用户', '男', 'default.gif', null, null, null, '1', '1000', '0', '10', '0', '0', null, '2014-05-27 12:57:12', null, null, null, null, null, null, null, null, null, null);
INSERT INTO `user` VALUES ('12', '107', '123456', '普通用户', '男', 'default.gif', null, null, null, '1', '900', '0', '10', '0', '0', null, '2014-05-27 12:57:14', null, null, null, null, null, null, null, null, null, null);
INSERT INTO `user` VALUES ('13', '108', '123456', '普通用户', '男', 'default.gif', null, null, null, '1', '800', '0', '10', '0', '0', null, '2014-05-27 12:57:17', null, null, null, null, null, null, null, null, null, null);
INSERT INTO `user` VALUES ('14', '109', '123456', '普通用户', '男', 'default.gif', null, null, null, '1', '700', '0', '10', '0', '0', null, '2014-05-27 12:57:20', null, null, null, null, null, null, null, null, null, null);
INSERT INTO `user` VALUES ('15', '110', '123456', '普通用户', '男', 'default.gif', null, null, null, '1', '600', '0', '10', '0', '0', null, '2014-05-27 12:57:23', null, null, null, null, null, null, null, null, null, null);
INSERT INTO `user` VALUES ('16', '111', '123456', '普通用户', '男', 'default.gif', null, null, null, '1', '500', '0', '10', '0', '0', null, '2014-05-27 12:57:25', null, null, null, null, null, null, null, null, null, null);
INSERT INTO `user` VALUES ('17', '112', '123456', '普通用户', '男', 'default.gif', null, null, null, '1', '400', '0', '10', '0', '0', null, '2014-05-27 12:57:28', null, null, null, null, null, null, null, null, null, null);
INSERT INTO `user` VALUES ('18', '113', '123456', '普通用户', '男', 'default.gif', null, null, null, '1', '300', '0', '10', '0', '0', null, '2014-05-27 12:57:31', null, null, null, null, null, null, null, null, null, null);
INSERT INTO `user` VALUES ('19', '114', '123456', '普通用户', '男', 'default.gif', null, null, null, '1', '200', '0', '10', '0', '0', null, '2014-05-27 12:57:38', null, null, null, null, null, null, null, null, null, null);
INSERT INTO `user` VALUES ('20', '115', '123456', '普通用户', '男', 'default.gif', '', '茂名', '2275755329@qq.com', '1', '100', '0', '10', '0', '0', '2014-05-28 00:13:23', '2014-05-27 12:57:42', '', '2014-05-28', '', '', 'CEO/总裁', '欧美外包', '一年以上', '2000元以下', '', '未婚');
INSERT INTO `user` VALUES ('21', '邹志伟', '123456', '普通用户', '女', 'bc6373db-ddb6-4283-9cb9-0fb232b4fffdask.png', '', '河南', '', '1', '200', '0', '12', '1', '0', '2014-06-04 19:23:33', '2014-06-03 20:40:18', '', '2014-06-03', '', '', '', '', '', '无收入', '', null);
INSERT INTO `user` VALUES ('22', '张伟禺', '123456', '普通用户', '男', 'default.gif', null, null, null, '1', '100', '0', '10', '0', '0', '2014-06-04 13:36:36', '2014-06-04 13:34:36', null, null, null, null, null, null, null, null, null, null);
INSERT INTO `user` VALUES ('23', '邓光华t', '1234567', '普通用户', '男', 'default.gif', null, null, null, '1', '100', '0', '10', '0', '0', '2014-06-04 17:12:04', '2014-06-04 17:11:47', null, null, null, null, null, null, null, null, null, null);
INSERT INTO `user` VALUES ('24', '邓光华1', '123456', '普通用户', '男', 'f73f4fc8-78d0-4840-ac33-9c4f61cc21e1b2eb3626-75c5-434b-b792-5819eed3aa44java.png', 'sdsd', '深圳', '2807089@qq.com', '1', '200', '0', '6', '0', '0', null, '2014-06-04 17:18:30', '撒打算实打实的s', '2014-06-09', '', '速度大大缩短实打实的 ', '项目经理/项目主管', '互联网', '三年以上', '4000-5999元', '实打实的', '未婚');
